# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_interfaces/CarDecisionInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarDecisionInterface(genpy.Message):
  _md5sum = "2ba1499a3ce71d6f0ce03ca3012beede"
  _type = "car_interfaces/CarDecisionInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64  timestamp   #数据时间戳
bool   stop   #是否停车，0继续前进，1停车（判断依据：障碍物位置）
bool  speed   #是否限速，0否，1是
float32  maxspeed    # 路段限速最大速度，单位为m/s（依据：限速标识）
float32  process_time    # 进程处理时间
float32 lanechange_flag   # 0 – 不换道， 1 – 又换道， 2- 左换道

"""
  __slots__ = ['timestamp','stop','speed','maxspeed','process_time','lanechange_flag']
  _slot_types = ['float64','bool','bool','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,stop,speed,maxspeed,process_time,lanechange_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarDecisionInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.stop is None:
        self.stop = False
      if self.speed is None:
        self.speed = False
      if self.maxspeed is None:
        self.maxspeed = 0.
      if self.process_time is None:
        self.process_time = 0.
      if self.lanechange_flag is None:
        self.lanechange_flag = 0.
    else:
      self.timestamp = 0.
      self.stop = False
      self.speed = False
      self.maxspeed = 0.
      self.process_time = 0.
      self.lanechange_flag = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d2B3f().pack(_x.timestamp, _x.stop, _x.speed, _x.maxspeed, _x.process_time, _x.lanechange_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.timestamp, _x.stop, _x.speed, _x.maxspeed, _x.process_time, _x.lanechange_flag,) = _get_struct_d2B3f().unpack(str[start:end])
      self.stop = bool(self.stop)
      self.speed = bool(self.speed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d2B3f().pack(_x.timestamp, _x.stop, _x.speed, _x.maxspeed, _x.process_time, _x.lanechange_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.timestamp, _x.stop, _x.speed, _x.maxspeed, _x.process_time, _x.lanechange_flag,) = _get_struct_d2B3f().unpack(str[start:end])
      self.stop = bool(self.stop)
      self.speed = bool(self.speed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2B3f = None
def _get_struct_d2B3f():
    global _struct_d2B3f
    if _struct_d2B3f is None:
        _struct_d2B3f = struct.Struct("<d2B3f")
    return _struct_d2B3f

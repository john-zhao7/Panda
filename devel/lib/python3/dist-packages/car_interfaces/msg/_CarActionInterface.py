# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_interfaces/CarActionInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarActionInterface(genpy.Message):
  _md5sum = "ca82fc4562e5f4077985eac24b00c6b1"
  _type = "car_interfaces/CarActionInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# topic car_action_data
int8 flag                       #标志位
int8 operate #0-不使能 1-使能
# 采头下降
# 风机打开 
# 中速档
# 风机采头打开  
# 高速档


# 卸棉动作（全体）启动按钮
int8 unloading # 0-不使能 1-使能
# 棉线倾斜
# 传送带  停留一段时间（按照装满来说是30s-1min吧）


# 其余动作按钮
int8 cotton_box_control 		 #0-不动作 1-棉箱倾斜 2-无动作 3-无动作 4-棉箱倾斜回正 
# int8 cotton_picker_enable      	 # 采头风机使能 0-不使能 1-使能 
int8 cotton_unloading                    # 卸棉传送带  0-关闭 1-启动
int8 Head_control    			 # 0-不动作 1-采头下降 2-左采头上升（需要使能）3-右采头上升（需要使能） 4-采头同升（需要使能）
int8 Engine_power     			 # 0-不动作 1-低速 2-中速 3-高速
int8 Target_Fan_gear 			 # 采头风机 0-不接通 1-风机 2-采头风机
int8 Door_control    			 #门控 0-停止 1-开门 2-关门
"""
  __slots__ = ['flag','operate','unloading','cotton_box_control','cotton_unloading','Head_control','Engine_power','Target_Fan_gear','Door_control']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flag,operate,unloading,cotton_box_control,cotton_unloading,Head_control,Engine_power,Target_Fan_gear,Door_control

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarActionInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.flag is None:
        self.flag = 0
      if self.operate is None:
        self.operate = 0
      if self.unloading is None:
        self.unloading = 0
      if self.cotton_box_control is None:
        self.cotton_box_control = 0
      if self.cotton_unloading is None:
        self.cotton_unloading = 0
      if self.Head_control is None:
        self.Head_control = 0
      if self.Engine_power is None:
        self.Engine_power = 0
      if self.Target_Fan_gear is None:
        self.Target_Fan_gear = 0
      if self.Door_control is None:
        self.Door_control = 0
    else:
      self.flag = 0
      self.operate = 0
      self.unloading = 0
      self.cotton_box_control = 0
      self.cotton_unloading = 0
      self.Head_control = 0
      self.Engine_power = 0
      self.Target_Fan_gear = 0
      self.Door_control = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9b().pack(_x.flag, _x.operate, _x.unloading, _x.cotton_box_control, _x.cotton_unloading, _x.Head_control, _x.Engine_power, _x.Target_Fan_gear, _x.Door_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.flag, _x.operate, _x.unloading, _x.cotton_box_control, _x.cotton_unloading, _x.Head_control, _x.Engine_power, _x.Target_Fan_gear, _x.Door_control,) = _get_struct_9b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9b().pack(_x.flag, _x.operate, _x.unloading, _x.cotton_box_control, _x.cotton_unloading, _x.Head_control, _x.Engine_power, _x.Target_Fan_gear, _x.Door_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.flag, _x.operate, _x.unloading, _x.cotton_box_control, _x.cotton_unloading, _x.Head_control, _x.Engine_power, _x.Target_Fan_gear, _x.Door_control,) = _get_struct_9b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9b = None
def _get_struct_9b():
    global _struct_9b
    if _struct_9b is None:
        _struct_9b = struct.Struct("<9b")
    return _struct_9b

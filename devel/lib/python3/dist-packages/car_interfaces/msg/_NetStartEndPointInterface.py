# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_interfaces/NetStartEndPointInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NetStartEndPointInterface(genpy.Message):
  _md5sum = "61c44c5d3d9ddb9029d88dfec0d60221"
  _type = "car_interfaces/NetStartEndPointInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 路径规划两点网络输入模块
# float64  timestamp  #时间戳
# float32[]  startpoint   #起点位置，先经后纬
# float32[]   endpoint    #终点位置，先经后纬
# float32  process_time    # 进程处理时间
# 路径规划起四点网络输入模块
float64  timestamp  #时间戳
float32[]  pointA_SN   #西北角位置，先经后纬
float32[]  pointB_EN   #东北角位置，先经后纬
float32[]  pointC_SE   #东南角位置，先经后纬
float32[]  pointD_SW   #西南角位置，先经后纬
float32  process_time    # 进程处理时间"""
  __slots__ = ['timestamp','pointA_SN','pointB_EN','pointC_SE','pointD_SW','process_time']
  _slot_types = ['float64','float32[]','float32[]','float32[]','float32[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,pointA_SN,pointB_EN,pointC_SE,pointD_SW,process_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NetStartEndPointInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.pointA_SN is None:
        self.pointA_SN = []
      if self.pointB_EN is None:
        self.pointB_EN = []
      if self.pointC_SE is None:
        self.pointC_SE = []
      if self.pointD_SW is None:
        self.pointD_SW = []
      if self.process_time is None:
        self.process_time = 0.
    else:
      self.timestamp = 0.
      self.pointA_SN = []
      self.pointB_EN = []
      self.pointC_SE = []
      self.pointD_SW = []
      self.process_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.pointA_SN)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.pointA_SN))
      length = len(self.pointB_EN)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.pointB_EN))
      length = len(self.pointC_SE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.pointC_SE))
      length = len(self.pointD_SW)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.pointD_SW))
      _x = self.process_time
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointA_SN = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointB_EN = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointC_SE = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointD_SW = s.unpack(str[start:end])
      start = end
      end += 4
      (self.process_time,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.pointA_SN)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pointA_SN.tostring())
      length = len(self.pointB_EN)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pointB_EN.tostring())
      length = len(self.pointC_SE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pointC_SE.tostring())
      length = len(self.pointD_SW)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pointD_SW.tostring())
      _x = self.process_time
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointA_SN = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointB_EN = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointC_SE = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pointD_SW = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.process_time,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

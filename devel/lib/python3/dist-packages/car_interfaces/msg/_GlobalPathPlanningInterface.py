# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_interfaces/GlobalPathPlanningInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GlobalPathPlanningInterface(genpy.Message):
  _md5sum = "cea6e0eb1165b2f9d112cf59800c74ff"
  _type = "car_interfaces/GlobalPathPlanningInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64  timestamp  #时间戳
float64[]  startpoint   #起点位置
float64[]   endpoint    #终点位置
string[]   routedata   #路径集合（所有途径点的集合）
float32  process_time    # 进程处理时间
int32 Global_Path_Segment_Index # 从1开始累加

int32 len_path # 全局路径的长度

#int8 Global_Path_End_Flag #终点置1，其他0
float32[]   last_point

int8 plan_over #0-等待规划完成 1-本次规划结束

float64[] x_list
float64[] y_list

string roadid #全局路径的地址，主要是给decision的
float64[]  incppoint  #路口信息集地址

"""
  __slots__ = ['timestamp','startpoint','endpoint','routedata','process_time','Global_Path_Segment_Index','len_path','last_point','plan_over','x_list','y_list','roadid','incppoint']
  _slot_types = ['float64','float64[]','float64[]','string[]','float32','int32','int32','float32[]','int8','float64[]','float64[]','string','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,startpoint,endpoint,routedata,process_time,Global_Path_Segment_Index,len_path,last_point,plan_over,x_list,y_list,roadid,incppoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalPathPlanningInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.startpoint is None:
        self.startpoint = []
      if self.endpoint is None:
        self.endpoint = []
      if self.routedata is None:
        self.routedata = []
      if self.process_time is None:
        self.process_time = 0.
      if self.Global_Path_Segment_Index is None:
        self.Global_Path_Segment_Index = 0
      if self.len_path is None:
        self.len_path = 0
      if self.last_point is None:
        self.last_point = []
      if self.plan_over is None:
        self.plan_over = 0
      if self.x_list is None:
        self.x_list = []
      if self.y_list is None:
        self.y_list = []
      if self.roadid is None:
        self.roadid = ''
      if self.incppoint is None:
        self.incppoint = []
    else:
      self.timestamp = 0.
      self.startpoint = []
      self.endpoint = []
      self.routedata = []
      self.process_time = 0.
      self.Global_Path_Segment_Index = 0
      self.len_path = 0
      self.last_point = []
      self.plan_over = 0
      self.x_list = []
      self.y_list = []
      self.roadid = ''
      self.incppoint = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.startpoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.startpoint))
      length = len(self.endpoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.endpoint))
      length = len(self.routedata)
      buff.write(_struct_I.pack(length))
      for val1 in self.routedata:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_f2i().pack(_x.process_time, _x.Global_Path_Segment_Index, _x.len_path))
      length = len(self.last_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.last_point))
      _x = self.plan_over
      buff.write(_get_struct_b().pack(_x))
      length = len(self.x_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.x_list))
      length = len(self.y_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.y_list))
      _x = self.roadid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.incppoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.incppoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.startpoint = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.endpoint = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.routedata = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.routedata.append(val1)
      _x = self
      start = end
      end += 12
      (_x.process_time, _x.Global_Path_Segment_Index, _x.len_path,) = _get_struct_f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.last_point = s.unpack(str[start:end])
      start = end
      end += 1
      (self.plan_over,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roadid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.roadid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.incppoint = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timestamp
      buff.write(_get_struct_d().pack(_x))
      length = len(self.startpoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.startpoint.tostring())
      length = len(self.endpoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.endpoint.tostring())
      length = len(self.routedata)
      buff.write(_struct_I.pack(length))
      for val1 in self.routedata:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_f2i().pack(_x.process_time, _x.Global_Path_Segment_Index, _x.len_path))
      length = len(self.last_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.last_point.tostring())
      _x = self.plan_over
      buff.write(_get_struct_b().pack(_x))
      length = len(self.x_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.x_list.tostring())
      length = len(self.y_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.y_list.tostring())
      _x = self.roadid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.incppoint)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.incppoint.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.timestamp,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.startpoint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.endpoint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.routedata = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.routedata.append(val1)
      _x = self
      start = end
      end += 12
      (_x.process_time, _x.Global_Path_Segment_Index, _x.len_path,) = _get_struct_f2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.last_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.plan_over,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_list = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_list = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roadid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.roadid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.incppoint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f2i = None
def _get_struct_f2i():
    global _struct_f2i
    if _struct_f2i is None:
        _struct_f2i = struct.Struct("<f2i")
    return _struct_f2i

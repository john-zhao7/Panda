# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_interfaces/FusionRequisiteInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FusionRequisiteInterface(genpy.Message):
  _md5sum = "298ab3582625b62ae48e8a406af731df"
  _type = "car_interfaces/FusionRequisiteInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64  timestamp  #时间戳
uint8  id   # 车辆ID
float32  centeroffset     # 车道中心线偏移距离，默认0
uint8  signnumber  #交通标识数量
float32[]  signdata  #交通标志数据
float32[]  lightdata  # 红绿灯数据
float32[]  obstacledata  #障碍物数据
float64  longitude        # 经度
float64  latitude         # 纬度
float64  height         # 高度
float64 posX                           #定位点UTM坐标x
float64 posY                           #定位点UTM坐标y
float64 posZ                           #定位点UTM坐标z
float32  yaw         # 偏航角（-180,180）
float32  pitch        # 俯仰角（-90-90）
float32  roll         # 横滚角（-180-180）
float32  eastvelocity         # 东向速度
float32  northvelocity        # 北向速度
float32  skyvelocity         # 天向速度
float32  carspeed    # 车辆速度，单位为m/s

"""
  __slots__ = ['timestamp','id','centeroffset','signnumber','signdata','lightdata','obstacledata','longitude','latitude','height','posX','posY','posZ','yaw','pitch','roll','eastvelocity','northvelocity','skyvelocity','carspeed']
  _slot_types = ['float64','uint8','float32','uint8','float32[]','float32[]','float32[]','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,id,centeroffset,signnumber,signdata,lightdata,obstacledata,longitude,latitude,height,posX,posY,posZ,yaw,pitch,roll,eastvelocity,northvelocity,skyvelocity,carspeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionRequisiteInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.id is None:
        self.id = 0
      if self.centeroffset is None:
        self.centeroffset = 0.
      if self.signnumber is None:
        self.signnumber = 0
      if self.signdata is None:
        self.signdata = []
      if self.lightdata is None:
        self.lightdata = []
      if self.obstacledata is None:
        self.obstacledata = []
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.height is None:
        self.height = 0.
      if self.posX is None:
        self.posX = 0.
      if self.posY is None:
        self.posY = 0.
      if self.posZ is None:
        self.posZ = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.eastvelocity is None:
        self.eastvelocity = 0.
      if self.northvelocity is None:
        self.northvelocity = 0.
      if self.skyvelocity is None:
        self.skyvelocity = 0.
      if self.carspeed is None:
        self.carspeed = 0.
    else:
      self.timestamp = 0.
      self.id = 0
      self.centeroffset = 0.
      self.signnumber = 0
      self.signdata = []
      self.lightdata = []
      self.obstacledata = []
      self.longitude = 0.
      self.latitude = 0.
      self.height = 0.
      self.posX = 0.
      self.posY = 0.
      self.posZ = 0.
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.eastvelocity = 0.
      self.northvelocity = 0.
      self.skyvelocity = 0.
      self.carspeed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dBfB().pack(_x.timestamp, _x.id, _x.centeroffset, _x.signnumber))
      length = len(self.signdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.signdata))
      length = len(self.lightdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lightdata))
      length = len(self.obstacledata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.obstacledata))
      _x = self
      buff.write(_get_struct_6d7f().pack(_x.longitude, _x.latitude, _x.height, _x.posX, _x.posY, _x.posZ, _x.yaw, _x.pitch, _x.roll, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.timestamp, _x.id, _x.centeroffset, _x.signnumber,) = _get_struct_dBfB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signdata = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lightdata = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacledata = s.unpack(str[start:end])
      _x = self
      start = end
      end += 76
      (_x.longitude, _x.latitude, _x.height, _x.posX, _x.posY, _x.posZ, _x.yaw, _x.pitch, _x.roll, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed,) = _get_struct_6d7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dBfB().pack(_x.timestamp, _x.id, _x.centeroffset, _x.signnumber))
      length = len(self.signdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.signdata.tostring())
      length = len(self.lightdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lightdata.tostring())
      length = len(self.obstacledata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.obstacledata.tostring())
      _x = self
      buff.write(_get_struct_6d7f().pack(_x.longitude, _x.latitude, _x.height, _x.posX, _x.posY, _x.posZ, _x.yaw, _x.pitch, _x.roll, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.timestamp, _x.id, _x.centeroffset, _x.signnumber,) = _get_struct_dBfB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signdata = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lightdata = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacledata = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 76
      (_x.longitude, _x.latitude, _x.height, _x.posX, _x.posY, _x.posZ, _x.yaw, _x.pitch, _x.roll, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed,) = _get_struct_6d7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d7f = None
def _get_struct_6d7f():
    global _struct_6d7f
    if _struct_6d7f is None:
        _struct_6d7f = struct.Struct("<6d7f")
    return _struct_6d7f
_struct_dBfB = None
def _get_struct_dBfB():
    global _struct_dBfB
    if _struct_dBfB is None:
        _struct_dBfB = struct.Struct("<dBfB")
    return _struct_dBfB

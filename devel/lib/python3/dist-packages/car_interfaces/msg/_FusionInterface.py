# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_interfaces/FusionInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FusionInterface(genpy.Message):
  _md5sum = "9bc3fce2c31a43ab376a08df38ba153b"
  _type = "car_interfaces/FusionInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64  timestamp  #时间戳
uint8  id   # 车辆ID
float32  carlength         # 车长m
float32  carwidth         # 车宽m
float32  carheight         # 车高m
float32  centeroffset     # 车道中心线偏移距离，默认0
uint8  signnumber  #交通标识数量
float32[]  signdata  #交通标志数据
float32[]  lightdata  # 红绿灯数据
float32[]  obstacledata  #障碍物数据
float32  yaw         # 偏航角（0-359.99）
float32  pitch        # 俯仰角（-90-90）
float32  roll         # 横滚角（-180-180）
float32  wx         # 角速度x
float32  wy         # 角速度y
float32  wz         # 角速度z
float32  ax         # 加速度x
float32  ay         # 加速度y
float32  az         # 加速度z
float64  longitude        # 经度
float64  latitude         # 纬度
float64  height         # 高度
float32  eastvelocity         # 东向速度
float32  northvelocity        # 北向速度
float32  skyvelocity         # 天向速度
float32  carspeed    # 车辆速度，单位为m/s
float32  steerangle    # 车辆转角，左转为正，右转为负
int8  gearpos    # 车辆档位信号（01：驻车，02：空挡（N），03：前进（D），04：后退（R），05：无效）
float32  braketq    # 制动量（-50-50nm）
uint8  parkingstate    # 制动状态（00：驻车状态，01：驻车释放状态）
uint8  soc    # 电池当前SOC（0-100）
uint8  batteryvol    # 电池电压（0-55V）
uint16  batterydischargecur    # 电池放电电流（0-100A）
uint8  car_run_mode   #车辆运行模式： 0： ACU控制  1：自动驾驶  2： 急停模式
uint8  throttle_percentage  #油门踏板开度： 取值0～100
uint8  braking_percentage  #制动踏板开度： 取值0～100
bool  left_light    #左转向灯状态：0：关闭，1：打开
bool  right_light    #右转向灯状态：0：关闭，1：打开
bool  reversing_light   #倒车灯状态：0：关闭，1：打开
bool  speaker     #喇叭状态：0：关闭，1：打开
bool  start_button     #启动按钮状态：0：按键无效，1：按键有效
bool  stop_button     #急停按钮状态：0：按键无效，1：按键有效
uint8  state          # 设备状态，0：状态正常，1：电池箱报警；2：电机控制器报警
uint8  error          # 错误码；电池箱报警：1：单体过压或欠压，2：放电电流异常，3：电压报警，4：电池温度报警，5：电池SOC过低。电机控制器报警：1：转向电机控制器故障，2：驱动电机控制器故障
float32  cotton_picker_fan_Enabler_act    #  使能采头与风机，1-使能；0-保持不变；
float32  cotton_bin_upper_act    # 升棉箱实际状态，1-提升；0-保持不变；
uint8  cotton_bin_lower_act   # 降棉箱实际状态，1-降低；0-保持不变；
uint8  cotton_bin_tilting_act   #  棉箱倾斜实际状态，1-倾斜；0-保持不变；
uint8  cotton_bin_restore_act # 棉箱回正实际状态，1-回正；0-保持不变；
uint8  cotton_unload_act  # 卸棉花实际状态（传送带），1-卸载；0-保持不变；
float32  cotton_picker_head_height  # 棉花采头高度，单位：m；
uint8  Target_primary_gear_act   # 01：低速，02：中速；03：高速；
uint8  Target_EngineSpeedLevel_act   # 01：低速；02：中速；03：高速；
uint8  Target_speedlever_percentage_act   #车速手柄开度（-100%-100%）   取值【-100, 100】，负数为后退，正数为前进。
float32  process_time     # 进程处理时间


#其中signdata格式float32[]为一维数组，储存按照[category ,length ,width ,height , x  ,y  ,z  ,v  ,latv ,category  ,length ,width ,height , x ,y ,z ,v ,latv ,……]存储，9个长度数据为一组
# int  category     # 交通标志类别，需自行定义类别，务必做好记录
# float  length       # 交通标志长度m，精度为0.01
# float  width       # 交通标志宽度m，精度为0.01
# float  height       # 交通标志高度m，精度为0.01
# float  x     # 交通标志的x坐标[米]，精度为0.01
# float  y   # 交通标志的y坐标[米]，精度为0.01
# float  z    # 交通标志的z坐标[米]，精度为0.01
# float  v=0    # 交通标志径向速度m/s，默认为0，精度为0.01
# float  latv=0  # 交通标志的横向速度m/s，默认为0，精度为0.01

# 其中lightdata格式float32[]为一维数组，储存按照[x,y,z,leftcolor,straightcolor,rightcolor,……]存储，6个长度数据为一组
# float  x     # 红绿灯x坐标[米]，精度为0.01
# float  y     # 红绿灯y坐标[米]，精度为0.01
# float  z     # 红绿灯z坐标[米]，精度为0.01
# int   leftcolor   #左转灯状态，01：红，02：黄，03：绿，04：关闭，关闭时代表没有左转灯
# int   straightcolor   #直行灯状态，01：红，02：黄，03：绿，04：关闭，
# int   rightcolor   #右转灯状态，01：红，02：黄，03：绿，04：关闭，关闭时代表没有右转灯
# 一般情况下，如果左转/右转/左右转和直行灯同时存在，无论什么颜色状态，这两个灯都是常亮的。如果信号灯只有直行灯，那用左/右转灯关闭代表当前路口只有直行灯，直行灯绿色时既可以直行也可以左转。

#其中obstacledata格式float32[]为一维数组，储存按照[category ,length ,width ,height , x  ,y  ,z  ,v  ,latv ,category  ,length ,width ,height , x ,y ,z ,v ,latv ,……]存储，9个长度数据为一组
# int  category     # 障碍物类别， 0点目标；1小汽车；2卡车/客车；3行人；4摩托车/电动车；5自行车；6宽大目标（如墙面）；7reserved保留； 8traffic light； 9stop sign
# float  length       # 障碍物长度m，精度为0.01
# float  width       # 障碍物宽度m，精度为0.01
# float  height       # 障碍物高度m，精度为0.01
# float  x     # 障碍物的x坐标[米]，精度为0.01
# float  y   # 障碍物的y坐标[米]，精度为0.01
# float  z    # 障碍物的z坐标[米]，精度为0.01
# float  v=0    # 障碍物径向速度m/s，精度为0.01
# float  latv=0  # 障碍物的横向速度m/s，精度为0.01
"""
  __slots__ = ['timestamp','id','carlength','carwidth','carheight','centeroffset','signnumber','signdata','lightdata','obstacledata','yaw','pitch','roll','wx','wy','wz','ax','ay','az','longitude','latitude','height','eastvelocity','northvelocity','skyvelocity','carspeed','steerangle','gearpos','braketq','parkingstate','soc','batteryvol','batterydischargecur','car_run_mode','throttle_percentage','braking_percentage','left_light','right_light','reversing_light','speaker','start_button','stop_button','state','error','cotton_picker_fan_Enabler_act','cotton_bin_upper_act','cotton_bin_lower_act','cotton_bin_tilting_act','cotton_bin_restore_act','cotton_unload_act','cotton_picker_head_height','Target_primary_gear_act','Target_EngineSpeedLevel_act','Target_speedlever_percentage_act','process_time']
  _slot_types = ['float64','uint8','float32','float32','float32','float32','uint8','float32[]','float32[]','float32[]','float32','float32','float32','float32','float32','float32','float32','float32','float32','float64','float64','float64','float32','float32','float32','float32','float32','int8','float32','uint8','uint8','uint8','uint16','uint8','uint8','uint8','bool','bool','bool','bool','bool','bool','uint8','uint8','float32','float32','uint8','uint8','uint8','uint8','float32','uint8','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,id,carlength,carwidth,carheight,centeroffset,signnumber,signdata,lightdata,obstacledata,yaw,pitch,roll,wx,wy,wz,ax,ay,az,longitude,latitude,height,eastvelocity,northvelocity,skyvelocity,carspeed,steerangle,gearpos,braketq,parkingstate,soc,batteryvol,batterydischargecur,car_run_mode,throttle_percentage,braking_percentage,left_light,right_light,reversing_light,speaker,start_button,stop_button,state,error,cotton_picker_fan_Enabler_act,cotton_bin_upper_act,cotton_bin_lower_act,cotton_bin_tilting_act,cotton_bin_restore_act,cotton_unload_act,cotton_picker_head_height,Target_primary_gear_act,Target_EngineSpeedLevel_act,Target_speedlever_percentage_act,process_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FusionInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.id is None:
        self.id = 0
      if self.carlength is None:
        self.carlength = 0.
      if self.carwidth is None:
        self.carwidth = 0.
      if self.carheight is None:
        self.carheight = 0.
      if self.centeroffset is None:
        self.centeroffset = 0.
      if self.signnumber is None:
        self.signnumber = 0
      if self.signdata is None:
        self.signdata = []
      if self.lightdata is None:
        self.lightdata = []
      if self.obstacledata is None:
        self.obstacledata = []
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.wx is None:
        self.wx = 0.
      if self.wy is None:
        self.wy = 0.
      if self.wz is None:
        self.wz = 0.
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.height is None:
        self.height = 0.
      if self.eastvelocity is None:
        self.eastvelocity = 0.
      if self.northvelocity is None:
        self.northvelocity = 0.
      if self.skyvelocity is None:
        self.skyvelocity = 0.
      if self.carspeed is None:
        self.carspeed = 0.
      if self.steerangle is None:
        self.steerangle = 0.
      if self.gearpos is None:
        self.gearpos = 0
      if self.braketq is None:
        self.braketq = 0.
      if self.parkingstate is None:
        self.parkingstate = 0
      if self.soc is None:
        self.soc = 0
      if self.batteryvol is None:
        self.batteryvol = 0
      if self.batterydischargecur is None:
        self.batterydischargecur = 0
      if self.car_run_mode is None:
        self.car_run_mode = 0
      if self.throttle_percentage is None:
        self.throttle_percentage = 0
      if self.braking_percentage is None:
        self.braking_percentage = 0
      if self.left_light is None:
        self.left_light = False
      if self.right_light is None:
        self.right_light = False
      if self.reversing_light is None:
        self.reversing_light = False
      if self.speaker is None:
        self.speaker = False
      if self.start_button is None:
        self.start_button = False
      if self.stop_button is None:
        self.stop_button = False
      if self.state is None:
        self.state = 0
      if self.error is None:
        self.error = 0
      if self.cotton_picker_fan_Enabler_act is None:
        self.cotton_picker_fan_Enabler_act = 0.
      if self.cotton_bin_upper_act is None:
        self.cotton_bin_upper_act = 0.
      if self.cotton_bin_lower_act is None:
        self.cotton_bin_lower_act = 0
      if self.cotton_bin_tilting_act is None:
        self.cotton_bin_tilting_act = 0
      if self.cotton_bin_restore_act is None:
        self.cotton_bin_restore_act = 0
      if self.cotton_unload_act is None:
        self.cotton_unload_act = 0
      if self.cotton_picker_head_height is None:
        self.cotton_picker_head_height = 0.
      if self.Target_primary_gear_act is None:
        self.Target_primary_gear_act = 0
      if self.Target_EngineSpeedLevel_act is None:
        self.Target_EngineSpeedLevel_act = 0
      if self.Target_speedlever_percentage_act is None:
        self.Target_speedlever_percentage_act = 0
      if self.process_time is None:
        self.process_time = 0.
    else:
      self.timestamp = 0.
      self.id = 0
      self.carlength = 0.
      self.carwidth = 0.
      self.carheight = 0.
      self.centeroffset = 0.
      self.signnumber = 0
      self.signdata = []
      self.lightdata = []
      self.obstacledata = []
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.wx = 0.
      self.wy = 0.
      self.wz = 0.
      self.ax = 0.
      self.ay = 0.
      self.az = 0.
      self.longitude = 0.
      self.latitude = 0.
      self.height = 0.
      self.eastvelocity = 0.
      self.northvelocity = 0.
      self.skyvelocity = 0.
      self.carspeed = 0.
      self.steerangle = 0.
      self.gearpos = 0
      self.braketq = 0.
      self.parkingstate = 0
      self.soc = 0
      self.batteryvol = 0
      self.batterydischargecur = 0
      self.car_run_mode = 0
      self.throttle_percentage = 0
      self.braking_percentage = 0
      self.left_light = False
      self.right_light = False
      self.reversing_light = False
      self.speaker = False
      self.start_button = False
      self.stop_button = False
      self.state = 0
      self.error = 0
      self.cotton_picker_fan_Enabler_act = 0.
      self.cotton_bin_upper_act = 0.
      self.cotton_bin_lower_act = 0
      self.cotton_bin_tilting_act = 0
      self.cotton_bin_restore_act = 0
      self.cotton_unload_act = 0
      self.cotton_picker_head_height = 0.
      self.Target_primary_gear_act = 0
      self.Target_EngineSpeedLevel_act = 0
      self.Target_speedlever_percentage_act = 0
      self.process_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dB4fB().pack(_x.timestamp, _x.id, _x.carlength, _x.carwidth, _x.carheight, _x.centeroffset, _x.signnumber))
      length = len(self.signdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.signdata))
      length = len(self.lightdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.lightdata))
      length = len(self.obstacledata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.obstacledata))
      _x = self
      buff.write(_get_struct_9f3d5fbf3BH11B2f4Bf3Bf().pack(_x.yaw, _x.pitch, _x.roll, _x.wx, _x.wy, _x.wz, _x.ax, _x.ay, _x.az, _x.longitude, _x.latitude, _x.height, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed, _x.steerangle, _x.gearpos, _x.braketq, _x.parkingstate, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.braking_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.timestamp, _x.id, _x.carlength, _x.carwidth, _x.carheight, _x.centeroffset, _x.signnumber,) = _get_struct_dB4fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signdata = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lightdata = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacledata = s.unpack(str[start:end])
      _x = self
      start = end
      end += 124
      (_x.yaw, _x.pitch, _x.roll, _x.wx, _x.wy, _x.wz, _x.ax, _x.ay, _x.az, _x.longitude, _x.latitude, _x.height, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed, _x.steerangle, _x.gearpos, _x.braketq, _x.parkingstate, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.braking_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time,) = _get_struct_9f3d5fbf3BH11B2f4Bf3Bf().unpack(str[start:end])
      self.left_light = bool(self.left_light)
      self.right_light = bool(self.right_light)
      self.reversing_light = bool(self.reversing_light)
      self.speaker = bool(self.speaker)
      self.start_button = bool(self.start_button)
      self.stop_button = bool(self.stop_button)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dB4fB().pack(_x.timestamp, _x.id, _x.carlength, _x.carwidth, _x.carheight, _x.centeroffset, _x.signnumber))
      length = len(self.signdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.signdata.tostring())
      length = len(self.lightdata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lightdata.tostring())
      length = len(self.obstacledata)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.obstacledata.tostring())
      _x = self
      buff.write(_get_struct_9f3d5fbf3BH11B2f4Bf3Bf().pack(_x.yaw, _x.pitch, _x.roll, _x.wx, _x.wy, _x.wz, _x.ax, _x.ay, _x.az, _x.longitude, _x.latitude, _x.height, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed, _x.steerangle, _x.gearpos, _x.braketq, _x.parkingstate, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.braking_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.timestamp, _x.id, _x.carlength, _x.carwidth, _x.carheight, _x.centeroffset, _x.signnumber,) = _get_struct_dB4fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.signdata = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lightdata = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.obstacledata = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 124
      (_x.yaw, _x.pitch, _x.roll, _x.wx, _x.wy, _x.wz, _x.ax, _x.ay, _x.az, _x.longitude, _x.latitude, _x.height, _x.eastvelocity, _x.northvelocity, _x.skyvelocity, _x.carspeed, _x.steerangle, _x.gearpos, _x.braketq, _x.parkingstate, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.braking_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time,) = _get_struct_9f3d5fbf3BH11B2f4Bf3Bf().unpack(str[start:end])
      self.left_light = bool(self.left_light)
      self.right_light = bool(self.right_light)
      self.reversing_light = bool(self.reversing_light)
      self.speaker = bool(self.speaker)
      self.start_button = bool(self.start_button)
      self.stop_button = bool(self.stop_button)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f3d5fbf3BH11B2f4Bf3Bf = None
def _get_struct_9f3d5fbf3BH11B2f4Bf3Bf():
    global _struct_9f3d5fbf3BH11B2f4Bf3Bf
    if _struct_9f3d5fbf3BH11B2f4Bf3Bf is None:
        _struct_9f3d5fbf3BH11B2f4Bf3Bf = struct.Struct("<9f3d5fbf3BH11B2f4Bf3Bf")
    return _struct_9f3d5fbf3BH11B2f4Bf3Bf
_struct_dB4fB = None
def _get_struct_dB4fB():
    global _struct_dB4fB
    if _struct_dB4fB is None:
        _struct_dB4fB = struct.Struct("<dB4fB")
    return _struct_dB4fB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmi/CarOriInterface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarOriInterface(genpy.Message):
  _md5sum = "4bf06e5d0a03ba5caee4a614abe96f39"
  _type = "hmi/CarOriInterface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# warn cyun 8.24 协议和msg的名称最好对应，不然程序写起来比较麻烦
# 另外，最好是根据协议来写msg，不然直接写msg，有些数据类型是有问题的

float64  timestamp  #时间戳
uint8  id   # 车辆ID
uint8 auto_enable #无人驾驶使能 0-不使能   1-使能
float32  carspeed    # 车辆速度，单位为m/s
float32  steerangle    # 车辆转角，左转为正，右转为负
float32 current_angle # 转角？车轮缺
int8  gearpos    # 车辆档位信号（01：驻车，02：空挡（N），03：前进（D），04：后退（R），05：无效）
float32  brake_pressure_request    # 制动行程请求（0-125）
uint8  brake_enable    # 制动使能（0：不使能  1：制动使能）
uint8  current_braking_percentage  #制动踏板开度： 取值0～125
uint8  soc    # 电池当前SOC（0-100）
uint8  batteryvol    # 电池电压（0-55V）
uint16  batterydischargecur    # 电池放电电流（0-100A）
uint8  car_run_mode   #车辆运行模式： 0： ACU控制  1：自动驾驶  2： 急停模式
int16  throttle_percentage  #油门踏板开度： 取值0～100
uint8  left_light    #左转向灯状态：0：关闭，1：打开
uint8  right_light    #右转向灯状态：0：关闭，1：打开
uint8  reversing_light   #倒车灯状态：0：关闭，1：打开
uint8  speaker     #喇叭状态：0：关闭，1：打开
uint8  start_button     #启动按钮状态：0：按键无效，1：按键有效
uint8  stop_button     #急停按钮状态：0：按键无效，1：按键有效
uint8  state          # 设备状态，0：状态正常，1：电池箱报警；2：电机控制器报警
uint8  error          # 错误码；电池箱报警：1：单体过压或欠压，2：放电电流异常，3：电压报警，4：电池温度报警，5：电池SOC过低。电机控制器报警：1：转向电机控制器故障，2：驱动电机控制器故障
float32  cotton_picker_fan_Enabler_act    #  使能采头与风机，1-使能；0-保持不变；
float32  cotton_bin_upper_act    # 升棉箱实际状态，1-提升；0-保持不变；
uint8  cotton_bin_lower_act   # 降棉箱实际状态，1-降低；0-保持不变；
uint8  cotton_bin_tilting_act   #  棉箱倾斜实际状态，1-倾斜；0-保持不变；
uint8  cotton_bin_restore_act # 棉箱回正实际状态，1-回正；0-保持不变；
uint8  cotton_unload_act  # 卸棉花实际状态（传送带），1-卸载；0-保持不变；
float32  cotton_picker_head_height  # 棉花采头高度，单位：m；
uint8  Target_primary_gear_act   # 01：低速，02：中速；03：高速；
uint8  Target_EngineSpeedLevel_act   # 01：低速；02：中速；03：高速；
int16  Target_speedlever_percentage_act   #车速手柄开度（-100%-100%）   取值【-100, 100】，负数为后退，正数为前进。
float32  process_time    # 进程处理时间


float32 raw_controlled


int8 wait_wirectrl# 0-等待 1-等待结束 发送给hmi界面
"""
  __slots__ = ['timestamp','id','auto_enable','carspeed','steerangle','current_angle','gearpos','brake_pressure_request','brake_enable','current_braking_percentage','soc','batteryvol','batterydischargecur','car_run_mode','throttle_percentage','left_light','right_light','reversing_light','speaker','start_button','stop_button','state','error','cotton_picker_fan_Enabler_act','cotton_bin_upper_act','cotton_bin_lower_act','cotton_bin_tilting_act','cotton_bin_restore_act','cotton_unload_act','cotton_picker_head_height','Target_primary_gear_act','Target_EngineSpeedLevel_act','Target_speedlever_percentage_act','process_time','raw_controlled','wait_wirectrl']
  _slot_types = ['float64','uint8','uint8','float32','float32','float32','int8','float32','uint8','uint8','uint8','uint8','uint16','uint8','int16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','uint8','uint8','uint8','uint8','float32','uint8','uint8','int16','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,id,auto_enable,carspeed,steerangle,current_angle,gearpos,brake_pressure_request,brake_enable,current_braking_percentage,soc,batteryvol,batterydischargecur,car_run_mode,throttle_percentage,left_light,right_light,reversing_light,speaker,start_button,stop_button,state,error,cotton_picker_fan_Enabler_act,cotton_bin_upper_act,cotton_bin_lower_act,cotton_bin_tilting_act,cotton_bin_restore_act,cotton_unload_act,cotton_picker_head_height,Target_primary_gear_act,Target_EngineSpeedLevel_act,Target_speedlever_percentage_act,process_time,raw_controlled,wait_wirectrl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarOriInterface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.id is None:
        self.id = 0
      if self.auto_enable is None:
        self.auto_enable = 0
      if self.carspeed is None:
        self.carspeed = 0.
      if self.steerangle is None:
        self.steerangle = 0.
      if self.current_angle is None:
        self.current_angle = 0.
      if self.gearpos is None:
        self.gearpos = 0
      if self.brake_pressure_request is None:
        self.brake_pressure_request = 0.
      if self.brake_enable is None:
        self.brake_enable = 0
      if self.current_braking_percentage is None:
        self.current_braking_percentage = 0
      if self.soc is None:
        self.soc = 0
      if self.batteryvol is None:
        self.batteryvol = 0
      if self.batterydischargecur is None:
        self.batterydischargecur = 0
      if self.car_run_mode is None:
        self.car_run_mode = 0
      if self.throttle_percentage is None:
        self.throttle_percentage = 0
      if self.left_light is None:
        self.left_light = 0
      if self.right_light is None:
        self.right_light = 0
      if self.reversing_light is None:
        self.reversing_light = 0
      if self.speaker is None:
        self.speaker = 0
      if self.start_button is None:
        self.start_button = 0
      if self.stop_button is None:
        self.stop_button = 0
      if self.state is None:
        self.state = 0
      if self.error is None:
        self.error = 0
      if self.cotton_picker_fan_Enabler_act is None:
        self.cotton_picker_fan_Enabler_act = 0.
      if self.cotton_bin_upper_act is None:
        self.cotton_bin_upper_act = 0.
      if self.cotton_bin_lower_act is None:
        self.cotton_bin_lower_act = 0
      if self.cotton_bin_tilting_act is None:
        self.cotton_bin_tilting_act = 0
      if self.cotton_bin_restore_act is None:
        self.cotton_bin_restore_act = 0
      if self.cotton_unload_act is None:
        self.cotton_unload_act = 0
      if self.cotton_picker_head_height is None:
        self.cotton_picker_head_height = 0.
      if self.Target_primary_gear_act is None:
        self.Target_primary_gear_act = 0
      if self.Target_EngineSpeedLevel_act is None:
        self.Target_EngineSpeedLevel_act = 0
      if self.Target_speedlever_percentage_act is None:
        self.Target_speedlever_percentage_act = 0
      if self.process_time is None:
        self.process_time = 0.
      if self.raw_controlled is None:
        self.raw_controlled = 0.
      if self.wait_wirectrl is None:
        self.wait_wirectrl = 0
    else:
      self.timestamp = 0.
      self.id = 0
      self.auto_enable = 0
      self.carspeed = 0.
      self.steerangle = 0.
      self.current_angle = 0.
      self.gearpos = 0
      self.brake_pressure_request = 0.
      self.brake_enable = 0
      self.current_braking_percentage = 0
      self.soc = 0
      self.batteryvol = 0
      self.batterydischargecur = 0
      self.car_run_mode = 0
      self.throttle_percentage = 0
      self.left_light = 0
      self.right_light = 0
      self.reversing_light = 0
      self.speaker = 0
      self.start_button = 0
      self.stop_button = 0
      self.state = 0
      self.error = 0
      self.cotton_picker_fan_Enabler_act = 0.
      self.cotton_bin_upper_act = 0.
      self.cotton_bin_lower_act = 0
      self.cotton_bin_tilting_act = 0
      self.cotton_bin_restore_act = 0
      self.cotton_unload_act = 0
      self.cotton_picker_head_height = 0.
      self.Target_primary_gear_act = 0
      self.Target_EngineSpeedLevel_act = 0
      self.Target_speedlever_percentage_act = 0
      self.process_time = 0.
      self.raw_controlled = 0.
      self.wait_wirectrl = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb().pack(_x.timestamp, _x.id, _x.auto_enable, _x.carspeed, _x.steerangle, _x.current_angle, _x.gearpos, _x.brake_pressure_request, _x.brake_enable, _x.current_braking_percentage, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time, _x.raw_controlled, _x.wait_wirectrl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.timestamp, _x.id, _x.auto_enable, _x.carspeed, _x.steerangle, _x.current_angle, _x.gearpos, _x.brake_pressure_request, _x.brake_enable, _x.current_braking_percentage, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time, _x.raw_controlled, _x.wait_wirectrl,) = _get_struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb().pack(_x.timestamp, _x.id, _x.auto_enable, _x.carspeed, _x.steerangle, _x.current_angle, _x.gearpos, _x.brake_pressure_request, _x.brake_enable, _x.current_braking_percentage, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time, _x.raw_controlled, _x.wait_wirectrl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.timestamp, _x.id, _x.auto_enable, _x.carspeed, _x.steerangle, _x.current_angle, _x.gearpos, _x.brake_pressure_request, _x.brake_enable, _x.current_braking_percentage, _x.soc, _x.batteryvol, _x.batterydischargecur, _x.car_run_mode, _x.throttle_percentage, _x.left_light, _x.right_light, _x.reversing_light, _x.speaker, _x.start_button, _x.stop_button, _x.state, _x.error, _x.cotton_picker_fan_Enabler_act, _x.cotton_bin_upper_act, _x.cotton_bin_lower_act, _x.cotton_bin_tilting_act, _x.cotton_bin_restore_act, _x.cotton_unload_act, _x.cotton_picker_head_height, _x.Target_primary_gear_act, _x.Target_EngineSpeedLevel_act, _x.Target_speedlever_percentage_act, _x.process_time, _x.raw_controlled, _x.wait_wirectrl,) = _get_struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb = None
def _get_struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb():
    global _struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb
    if _struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb is None:
        _struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb = struct.Struct("<d2B3fbf4BHBh8B2f4Bf2Bh2fb")
    return _struct_d2B3fbf4BHBh8B2f4Bf2Bh2fb

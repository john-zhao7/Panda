# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lidar/LidarObject.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LidarObject(genpy.Message):
  _md5sum = "27ffc99628ee0a3fb5403a184a2873f3"
  _type = "lidar/LidarObject"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint8 id
uint8 type
float32 exist_con
float32 vel_x
float32 vel_y
float32 vel_z
float32 dis_x
float32 dis_y
float32 dis_z
float32 acc_x
float32 acc_y
float32 acc_z
float32 object_x
float32 object_y
float32 object_z
float32 core_x
float32 core_y
float32 core_z
uint8 attention_type
uint8   motion_state
float32 age
uint8 tra_id
"""
  __slots__ = ['id','type','exist_con','vel_x','vel_y','vel_z','dis_x','dis_y','dis_z','acc_x','acc_y','acc_z','object_x','object_y','object_z','core_x','core_y','core_z','attention_type','motion_state','age','tra_id']
  _slot_types = ['uint8','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,exist_con,vel_x,vel_y,vel_z,dis_x,dis_y,dis_z,acc_x,acc_y,acc_z,object_x,object_y,object_z,core_x,core_y,core_z,attention_type,motion_state,age,tra_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LidarObject, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.exist_con is None:
        self.exist_con = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
      if self.vel_z is None:
        self.vel_z = 0.
      if self.dis_x is None:
        self.dis_x = 0.
      if self.dis_y is None:
        self.dis_y = 0.
      if self.dis_z is None:
        self.dis_z = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.object_x is None:
        self.object_x = 0.
      if self.object_y is None:
        self.object_y = 0.
      if self.object_z is None:
        self.object_z = 0.
      if self.core_x is None:
        self.core_x = 0.
      if self.core_y is None:
        self.core_y = 0.
      if self.core_z is None:
        self.core_z = 0.
      if self.attention_type is None:
        self.attention_type = 0
      if self.motion_state is None:
        self.motion_state = 0
      if self.age is None:
        self.age = 0.
      if self.tra_id is None:
        self.tra_id = 0
    else:
      self.id = 0
      self.type = 0
      self.exist_con = 0.
      self.vel_x = 0.
      self.vel_y = 0.
      self.vel_z = 0.
      self.dis_x = 0.
      self.dis_y = 0.
      self.dis_z = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.object_x = 0.
      self.object_y = 0.
      self.object_z = 0.
      self.core_x = 0.
      self.core_y = 0.
      self.core_z = 0.
      self.attention_type = 0
      self.motion_state = 0
      self.age = 0.
      self.tra_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B16f2BfB().pack(_x.id, _x.type, _x.exist_con, _x.vel_x, _x.vel_y, _x.vel_z, _x.dis_x, _x.dis_y, _x.dis_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.object_x, _x.object_y, _x.object_z, _x.core_x, _x.core_y, _x.core_z, _x.attention_type, _x.motion_state, _x.age, _x.tra_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.id, _x.type, _x.exist_con, _x.vel_x, _x.vel_y, _x.vel_z, _x.dis_x, _x.dis_y, _x.dis_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.object_x, _x.object_y, _x.object_z, _x.core_x, _x.core_y, _x.core_z, _x.attention_type, _x.motion_state, _x.age, _x.tra_id,) = _get_struct_2B16f2BfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B16f2BfB().pack(_x.id, _x.type, _x.exist_con, _x.vel_x, _x.vel_y, _x.vel_z, _x.dis_x, _x.dis_y, _x.dis_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.object_x, _x.object_y, _x.object_z, _x.core_x, _x.core_y, _x.core_z, _x.attention_type, _x.motion_state, _x.age, _x.tra_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.id, _x.type, _x.exist_con, _x.vel_x, _x.vel_y, _x.vel_z, _x.dis_x, _x.dis_y, _x.dis_z, _x.acc_x, _x.acc_y, _x.acc_z, _x.object_x, _x.object_y, _x.object_z, _x.core_x, _x.core_y, _x.core_z, _x.attention_type, _x.motion_state, _x.age, _x.tra_id,) = _get_struct_2B16f2BfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B16f2BfB = None
def _get_struct_2B16f2BfB():
    global _struct_2B16f2BfB
    if _struct_2B16f2BfB is None:
        _struct_2B16f2BfB = struct.Struct("<2B16f2BfB")
    return _struct_2B16f2BfB

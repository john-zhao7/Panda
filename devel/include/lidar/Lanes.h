// Generated by gencpp from file lidar/Lanes.msg
// DO NOT EDIT!


#ifndef LIDAR_MESSAGE_LANES_H
#define LIDAR_MESSAGE_LANES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lidar/Lane.h>

namespace lidar
{
template <class ContainerAllocator>
struct Lanes_
{
  typedef Lanes_<ContainerAllocator> Type;

  Lanes_()
    : lanes()  {
    }
  Lanes_(const ContainerAllocator& _alloc)
    : lanes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lidar::Lane_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lidar::Lane_<ContainerAllocator> >> _lanes_type;
  _lanes_type lanes;





  typedef boost::shared_ptr< ::lidar::Lanes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar::Lanes_<ContainerAllocator> const> ConstPtr;

}; // struct Lanes_

typedef ::lidar::Lanes_<std::allocator<void> > Lanes;

typedef boost::shared_ptr< ::lidar::Lanes > LanesPtr;
typedef boost::shared_ptr< ::lidar::Lanes const> LanesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar::Lanes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar::Lanes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar::Lanes_<ContainerAllocator1> & lhs, const ::lidar::Lanes_<ContainerAllocator2> & rhs)
{
  return lhs.lanes == rhs.lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar::Lanes_<ContainerAllocator1> & lhs, const ::lidar::Lanes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar::Lanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar::Lanes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar::Lanes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar::Lanes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar::Lanes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar::Lanes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar::Lanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c91e3b4d885a65b5ff2c91de75a06a9";
  }

  static const char* value(const ::lidar::Lanes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c91e3b4d885a65bULL;
  static const uint64_t static_value2 = 0x5ff2c91de75a06a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar::Lanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar/Lanes";
  }

  static const char* value(const ::lidar::Lanes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar::Lanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Lane[] lanes\n"
"================================================================================\n"
"MSG: lidar/Lane\n"
"std_msgs/Int32   lane_id \n"
"Curve            curve \n"
"EndPoints        end_points \n"
"std_msgs/Int32   measure_status  \n"
"std_msgs/Float32 confidence \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: lidar/Curve\n"
"std_msgs/Float32 x_start \n"
"std_msgs/Float32 x_end \n"
"std_msgs/Float32 a \n"
"std_msgs/Float32 b \n"
"std_msgs/Float32 c \n"
"std_msgs/Float32 d \n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: lidar/EndPoints\n"
"Point2f start \n"
"Point2f end \n"
"\n"
"================================================================================\n"
"MSG: lidar/Point2f\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
;
  }

  static const char* value(const ::lidar::Lanes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar::Lanes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lanes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar::Lanes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar::Lanes_<ContainerAllocator>& v)
  {
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lidar::Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_MESSAGE_LANES_H

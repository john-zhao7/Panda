// Generated by gencpp from file lidar/Point3f.msg
// DO NOT EDIT!


#ifndef LIDAR_MESSAGE_POINT3F_H
#define LIDAR_MESSAGE_POINT3F_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace lidar
{
template <class ContainerAllocator>
struct Point3f_
{
  typedef Point3f_<ContainerAllocator> Type;

  Point3f_()
    : x()
    , y()
    , z()  {
    }
  Point3f_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , z(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::lidar::Point3f_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar::Point3f_<ContainerAllocator> const> ConstPtr;

}; // struct Point3f_

typedef ::lidar::Point3f_<std::allocator<void> > Point3f;

typedef boost::shared_ptr< ::lidar::Point3f > Point3fPtr;
typedef boost::shared_ptr< ::lidar::Point3f const> Point3fConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar::Point3f_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar::Point3f_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar::Point3f_<ContainerAllocator1> & lhs, const ::lidar::Point3f_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar::Point3f_<ContainerAllocator1> & lhs, const ::lidar::Point3f_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar::Point3f_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar::Point3f_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar::Point3f_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar::Point3f_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar::Point3f_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar::Point3f_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar::Point3f_<ContainerAllocator> >
{
  static const char* value()
  {
    return "091cca004b733810eb3a4ffef5db3158";
  }

  static const char* value(const ::lidar::Point3f_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x091cca004b733810ULL;
  static const uint64_t static_value2 = 0xeb3a4ffef5db3158ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar::Point3f_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar/Point3f";
  }

  static const char* value(const ::lidar::Point3f_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar::Point3f_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
"std_msgs/Float32 z \n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::lidar::Point3f_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar::Point3f_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point3f_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar::Point3f_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar::Point3f_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_MESSAGE_POINT3F_H

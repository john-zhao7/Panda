// Generated by gencpp from file hmi/NodePointsInterface.msg
// DO NOT EDIT!


#ifndef HMI_MESSAGE_NODEPOINTSINTERFACE_H
#define HMI_MESSAGE_NODEPOINTSINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hmi
{
template <class ContainerAllocator>
struct NodePointsInterface_
{
  typedef NodePointsInterface_<ContainerAllocator> Type;

  NodePointsInterface_()
    : stationpoint()
    , incppoint()  {
    }
  NodePointsInterface_(const ContainerAllocator& _alloc)
    : stationpoint(_alloc)
    , incppoint(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _stationpoint_type;
  _stationpoint_type stationpoint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _incppoint_type;
  _incppoint_type incppoint;





  typedef boost::shared_ptr< ::hmi::NodePointsInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmi::NodePointsInterface_<ContainerAllocator> const> ConstPtr;

}; // struct NodePointsInterface_

typedef ::hmi::NodePointsInterface_<std::allocator<void> > NodePointsInterface;

typedef boost::shared_ptr< ::hmi::NodePointsInterface > NodePointsInterfacePtr;
typedef boost::shared_ptr< ::hmi::NodePointsInterface const> NodePointsInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmi::NodePointsInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmi::NodePointsInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmi::NodePointsInterface_<ContainerAllocator1> & lhs, const ::hmi::NodePointsInterface_<ContainerAllocator2> & rhs)
{
  return lhs.stationpoint == rhs.stationpoint &&
    lhs.incppoint == rhs.incppoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmi::NodePointsInterface_<ContainerAllocator1> & lhs, const ::hmi::NodePointsInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hmi::NodePointsInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmi::NodePointsInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmi::NodePointsInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmi::NodePointsInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmi::NodePointsInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmi::NodePointsInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmi::NodePointsInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d98513179a031ba600954534b7ca6bb";
  }

  static const char* value(const ::hmi::NodePointsInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d98513179a031baULL;
  static const uint64_t static_value2 = 0x600954534b7ca6bbULL;
};

template<class ContainerAllocator>
struct DataType< ::hmi::NodePointsInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmi/NodePointsInterface";
  }

  static const char* value(const ::hmi::NodePointsInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmi::NodePointsInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[]  stationpoint   #站点信息集，先经后纬\n"
"float64[]  incppoint      #路口信息集，先经后纬\n"
;
  }

  static const char* value(const ::hmi::NodePointsInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmi::NodePointsInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stationpoint);
      stream.next(m.incppoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodePointsInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmi::NodePointsInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmi::NodePointsInterface_<ContainerAllocator>& v)
  {
    s << indent << "stationpoint[]" << std::endl;
    for (size_t i = 0; i < v.stationpoint.size(); ++i)
    {
      s << indent << "  stationpoint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.stationpoint[i]);
    }
    s << indent << "incppoint[]" << std::endl;
    for (size_t i = 0; i < v.incppoint.size(); ++i)
    {
      s << indent << "  incppoint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.incppoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMI_MESSAGE_NODEPOINTSINTERFACE_H

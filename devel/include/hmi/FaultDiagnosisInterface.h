// Generated by gencpp from file hmi/FaultDiagnosisInterface.msg
// DO NOT EDIT!


#ifndef HMI_MESSAGE_FAULTDIAGNOSISINTERFACE_H
#define HMI_MESSAGE_FAULTDIAGNOSISINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hmi
{
template <class ContainerAllocator>
struct FaultDiagnosisInterface_
{
  typedef FaultDiagnosisInterface_<ContainerAllocator> Type;

  FaultDiagnosisInterface_()
    : lidar_start(0)
    , Gps_state_fault(false)
    , can_state(false)  {
    }
  FaultDiagnosisInterface_(const ContainerAllocator& _alloc)
    : lidar_start(0)
    , Gps_state_fault(false)
    , can_state(false)  {
  (void)_alloc;
    }



   typedef int8_t _lidar_start_type;
  _lidar_start_type lidar_start;

   typedef uint8_t _Gps_state_fault_type;
  _Gps_state_fault_type Gps_state_fault;

   typedef uint8_t _can_state_type;
  _can_state_type can_state;





  typedef boost::shared_ptr< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> const> ConstPtr;

}; // struct FaultDiagnosisInterface_

typedef ::hmi::FaultDiagnosisInterface_<std::allocator<void> > FaultDiagnosisInterface;

typedef boost::shared_ptr< ::hmi::FaultDiagnosisInterface > FaultDiagnosisInterfacePtr;
typedef boost::shared_ptr< ::hmi::FaultDiagnosisInterface const> FaultDiagnosisInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmi::FaultDiagnosisInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmi::FaultDiagnosisInterface_<ContainerAllocator1> & lhs, const ::hmi::FaultDiagnosisInterface_<ContainerAllocator2> & rhs)
{
  return lhs.lidar_start == rhs.lidar_start &&
    lhs.Gps_state_fault == rhs.Gps_state_fault &&
    lhs.can_state == rhs.can_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmi::FaultDiagnosisInterface_<ContainerAllocator1> & lhs, const ::hmi::FaultDiagnosisInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecaf07b9d1233a61400449644874e137";
  }

  static const char* value(const ::hmi::FaultDiagnosisInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecaf07b9d1233a61ULL;
  static const uint64_t static_value2 = 0x400449644874e137ULL;
};

template<class ContainerAllocator>
struct DataType< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmi/FaultDiagnosisInterface";
  }

  static const char* value(const ::hmi::FaultDiagnosisInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 lidar_start        #0-未启动 1-启动\n"
"bool Gps_state_fault    #惯导通讯故障 False：异常；True：正常\n"
"bool can_state          #can通信故障False：异常；True：正常\n"
"\n"
;
  }

  static const char* value(const ::hmi::FaultDiagnosisInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lidar_start);
      stream.next(m.Gps_state_fault);
      stream.next(m.can_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultDiagnosisInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmi::FaultDiagnosisInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmi::FaultDiagnosisInterface_<ContainerAllocator>& v)
  {
    s << indent << "lidar_start: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lidar_start);
    s << indent << "Gps_state_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Gps_state_fault);
    s << indent << "can_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMI_MESSAGE_FAULTDIAGNOSISINTERFACE_H

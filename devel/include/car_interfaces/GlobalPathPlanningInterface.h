// Generated by gencpp from file car_interfaces/GlobalPathPlanningInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_GLOBALPATHPLANNINGINTERFACE_H
#define CAR_INTERFACES_MESSAGE_GLOBALPATHPLANNINGINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct GlobalPathPlanningInterface_
{
  typedef GlobalPathPlanningInterface_<ContainerAllocator> Type;

  GlobalPathPlanningInterface_()
    : timestamp(0.0)
    , startpoint()
    , endpoint()
    , routedata()
    , process_time(0.0)
    , Global_Path_Segment_Index(0)
    , len_path(0)
    , last_point()
    , plan_over(0)
    , x_list()
    , y_list()
    , roadid()
    , incppoint()  {
    }
  GlobalPathPlanningInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , startpoint(_alloc)
    , endpoint(_alloc)
    , routedata(_alloc)
    , process_time(0.0)
    , Global_Path_Segment_Index(0)
    , len_path(0)
    , last_point(_alloc)
    , plan_over(0)
    , x_list(_alloc)
    , y_list(_alloc)
    , roadid(_alloc)
    , incppoint(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _startpoint_type;
  _startpoint_type startpoint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _endpoint_type;
  _endpoint_type endpoint;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _routedata_type;
  _routedata_type routedata;

   typedef float _process_time_type;
  _process_time_type process_time;

   typedef int32_t _Global_Path_Segment_Index_type;
  _Global_Path_Segment_Index_type Global_Path_Segment_Index;

   typedef int32_t _len_path_type;
  _len_path_type len_path;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _last_point_type;
  _last_point_type last_point;

   typedef int8_t _plan_over_type;
  _plan_over_type plan_over;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_list_type;
  _x_list_type x_list;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_list_type;
  _y_list_type y_list;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _roadid_type;
  _roadid_type roadid;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _incppoint_type;
  _incppoint_type incppoint;





  typedef boost::shared_ptr< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalPathPlanningInterface_

typedef ::car_interfaces::GlobalPathPlanningInterface_<std::allocator<void> > GlobalPathPlanningInterface;

typedef boost::shared_ptr< ::car_interfaces::GlobalPathPlanningInterface > GlobalPathPlanningInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::GlobalPathPlanningInterface const> GlobalPathPlanningInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.startpoint == rhs.startpoint &&
    lhs.endpoint == rhs.endpoint &&
    lhs.routedata == rhs.routedata &&
    lhs.process_time == rhs.process_time &&
    lhs.Global_Path_Segment_Index == rhs.Global_Path_Segment_Index &&
    lhs.len_path == rhs.len_path &&
    lhs.last_point == rhs.last_point &&
    lhs.plan_over == rhs.plan_over &&
    lhs.x_list == rhs.x_list &&
    lhs.y_list == rhs.y_list &&
    lhs.roadid == rhs.roadid &&
    lhs.incppoint == rhs.incppoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cea6e0eb1165b2f9d112cf59800c74ff";
  }

  static const char* value(const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcea6e0eb1165b2f9ULL;
  static const uint64_t static_value2 = 0xd112cf59800c74ffULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/GlobalPathPlanningInterface";
  }

  static const char* value(const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  timestamp  #时间戳\n"
"float64[]  startpoint   #起点位置\n"
"float64[]   endpoint    #终点位置\n"
"string[]   routedata   #路径集合（所有途径点的集合）\n"
"float32  process_time    # 进程处理时间\n"
"int32 Global_Path_Segment_Index # 从1开始累加\n"
"\n"
"int32 len_path # 全局路径的长度\n"
"\n"
"#int8 Global_Path_End_Flag #终点置1，其他0\n"
"float32[]   last_point\n"
"\n"
"int8 plan_over #0-等待规划完成 1-本次规划结束\n"
"\n"
"float64[] x_list\n"
"float64[] y_list\n"
"\n"
"string roadid #全局路径的地址，主要是给decision的\n"
"float64[]  incppoint  #路口信息集地址\n"
"\n"
;
  }

  static const char* value(const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.startpoint);
      stream.next(m.endpoint);
      stream.next(m.routedata);
      stream.next(m.process_time);
      stream.next(m.Global_Path_Segment_Index);
      stream.next(m.len_path);
      stream.next(m.last_point);
      stream.next(m.plan_over);
      stream.next(m.x_list);
      stream.next(m.y_list);
      stream.next(m.roadid);
      stream.next(m.incppoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalPathPlanningInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::GlobalPathPlanningInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "startpoint[]" << std::endl;
    for (size_t i = 0; i < v.startpoint.size(); ++i)
    {
      s << indent << "  startpoint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.startpoint[i]);
    }
    s << indent << "endpoint[]" << std::endl;
    for (size_t i = 0; i < v.endpoint.size(); ++i)
    {
      s << indent << "  endpoint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.endpoint[i]);
    }
    s << indent << "routedata[]" << std::endl;
    for (size_t i = 0; i < v.routedata.size(); ++i)
    {
      s << indent << "  routedata[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.routedata[i]);
    }
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
    s << indent << "Global_Path_Segment_Index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Global_Path_Segment_Index);
    s << indent << "len_path: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len_path);
    s << indent << "last_point[]" << std::endl;
    for (size_t i = 0; i < v.last_point.size(); ++i)
    {
      s << indent << "  last_point[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.last_point[i]);
    }
    s << indent << "plan_over: ";
    Printer<int8_t>::stream(s, indent + "  ", v.plan_over);
    s << indent << "x_list[]" << std::endl;
    for (size_t i = 0; i < v.x_list.size(); ++i)
    {
      s << indent << "  x_list[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_list[i]);
    }
    s << indent << "y_list[]" << std::endl;
    for (size_t i = 0; i < v.y_list.size(); ++i)
    {
      s << indent << "  y_list[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_list[i]);
    }
    s << indent << "roadid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.roadid);
    s << indent << "incppoint[]" << std::endl;
    for (size_t i = 0; i < v.incppoint.size(); ++i)
    {
      s << indent << "  incppoint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.incppoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_GLOBALPATHPLANNINGINTERFACE_H

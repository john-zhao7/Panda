// Generated by gencpp from file car_interfaces/FusionAddInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_FUSIONADDINTERFACE_H
#define CAR_INTERFACES_MESSAGE_FUSIONADDINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct FusionAddInterface_
{
  typedef FusionAddInterface_<ContainerAllocator> Type;

  FusionAddInterface_()
    : id(0)
    , carlength(0.0)
    , carwidth(0.0)
    , carheight(0.0)
    , eastvelocity(0.0)
    , northvelocity(0.0)
    , skyvelocity(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)  {
    }
  FusionAddInterface_(const ContainerAllocator& _alloc)
    : id(0)
    , carlength(0.0)
    , carwidth(0.0)
    , carheight(0.0)
    , eastvelocity(0.0)
    , northvelocity(0.0)
    , skyvelocity(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _carlength_type;
  _carlength_type carlength;

   typedef float _carwidth_type;
  _carwidth_type carwidth;

   typedef float _carheight_type;
  _carheight_type carheight;

   typedef float _eastvelocity_type;
  _eastvelocity_type eastvelocity;

   typedef float _northvelocity_type;
  _northvelocity_type northvelocity;

   typedef float _skyvelocity_type;
  _skyvelocity_type skyvelocity;

   typedef float _wx_type;
  _wx_type wx;

   typedef float _wy_type;
  _wy_type wy;

   typedef float _wz_type;
  _wz_type wz;

   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;





  typedef boost::shared_ptr< ::car_interfaces::FusionAddInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::FusionAddInterface_<ContainerAllocator> const> ConstPtr;

}; // struct FusionAddInterface_

typedef ::car_interfaces::FusionAddInterface_<std::allocator<void> > FusionAddInterface;

typedef boost::shared_ptr< ::car_interfaces::FusionAddInterface > FusionAddInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::FusionAddInterface const> FusionAddInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::FusionAddInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::FusionAddInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::FusionAddInterface_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.carlength == rhs.carlength &&
    lhs.carwidth == rhs.carwidth &&
    lhs.carheight == rhs.carheight &&
    lhs.eastvelocity == rhs.eastvelocity &&
    lhs.northvelocity == rhs.northvelocity &&
    lhs.skyvelocity == rhs.skyvelocity &&
    lhs.wx == rhs.wx &&
    lhs.wy == rhs.wy &&
    lhs.wz == rhs.wz &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::FusionAddInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::FusionAddInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::FusionAddInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::FusionAddInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::FusionAddInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "237330b40296f4bbfbedaab80a131550";
  }

  static const char* value(const ::car_interfaces::FusionAddInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x237330b40296f4bbULL;
  static const uint64_t static_value2 = 0xfbedaab80a131550ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/FusionAddInterface";
  }

  static const char* value(const ::car_interfaces::FusionAddInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  id   # 车辆ID\n"
"float32  carlength         # 车长m\n"
"float32  carwidth         # 车宽m\n"
"float32  carheight         # 车高m\n"
"float32  eastvelocity         # 东向速度\n"
"float32  northvelocity        # 北向速度\n"
"float32  skyvelocity         # 天向速度\n"
"float32  wx         # 角速度x\n"
"float32  wy         # 角速度y\n"
"float32  wz         # 角速度z\n"
"float32  ax         # 加速度x\n"
"float32  ay         # 加速度y\n"
"float32  az         # 加速度z\n"
"\n"
;
  }

  static const char* value(const ::car_interfaces::FusionAddInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.carlength);
      stream.next(m.carwidth);
      stream.next(m.carheight);
      stream.next(m.eastvelocity);
      stream.next(m.northvelocity);
      stream.next(m.skyvelocity);
      stream.next(m.wx);
      stream.next(m.wy);
      stream.next(m.wz);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusionAddInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::FusionAddInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::FusionAddInterface_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "carlength: ";
    Printer<float>::stream(s, indent + "  ", v.carlength);
    s << indent << "carwidth: ";
    Printer<float>::stream(s, indent + "  ", v.carwidth);
    s << indent << "carheight: ";
    Printer<float>::stream(s, indent + "  ", v.carheight);
    s << indent << "eastvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.eastvelocity);
    s << indent << "northvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.northvelocity);
    s << indent << "skyvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.skyvelocity);
    s << indent << "wx: ";
    Printer<float>::stream(s, indent + "  ", v.wx);
    s << indent << "wy: ";
    Printer<float>::stream(s, indent + "  ", v.wy);
    s << indent << "wz: ";
    Printer<float>::stream(s, indent + "  ", v.wz);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_FUSIONADDINTERFACE_H

// Generated by gencpp from file car_interfaces/LocalPathPlanningInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_LOCALPATHPLANNINGINTERFACE_H
#define CAR_INTERFACES_MESSAGE_LOCALPATHPLANNINGINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct LocalPathPlanningInterface_
{
  typedef LocalPathPlanningInterface_<ContainerAllocator> Type;

  LocalPathPlanningInterface_()
    : timestamp(0.0)
    , startpoint()
    , endpoint()
    , routedata()
    , routedata_fix()
    , process_time(0.0)
    , len_path(0)
    , plan_over(0)  {
    }
  LocalPathPlanningInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , startpoint(_alloc)
    , endpoint(_alloc)
    , routedata(_alloc)
    , routedata_fix(_alloc)
    , process_time(0.0)
    , len_path(0)
    , plan_over(0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _startpoint_type;
  _startpoint_type startpoint;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _endpoint_type;
  _endpoint_type endpoint;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _routedata_type;
  _routedata_type routedata;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _routedata_fix_type;
  _routedata_fix_type routedata_fix;

   typedef float _process_time_type;
  _process_time_type process_time;

   typedef int32_t _len_path_type;
  _len_path_type len_path;

   typedef int8_t _plan_over_type;
  _plan_over_type plan_over;





  typedef boost::shared_ptr< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> const> ConstPtr;

}; // struct LocalPathPlanningInterface_

typedef ::car_interfaces::LocalPathPlanningInterface_<std::allocator<void> > LocalPathPlanningInterface;

typedef boost::shared_ptr< ::car_interfaces::LocalPathPlanningInterface > LocalPathPlanningInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::LocalPathPlanningInterface const> LocalPathPlanningInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.startpoint == rhs.startpoint &&
    lhs.endpoint == rhs.endpoint &&
    lhs.routedata == rhs.routedata &&
    lhs.routedata_fix == rhs.routedata_fix &&
    lhs.process_time == rhs.process_time &&
    lhs.len_path == rhs.len_path &&
    lhs.plan_over == rhs.plan_over;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95d098a26eb7d556e883061d346e2f5c";
  }

  static const char* value(const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95d098a26eb7d556ULL;
  static const uint64_t static_value2 = 0xe883061d346e2f5cULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/LocalPathPlanningInterface";
  }

  static const char* value(const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# float64  timestamp  #时间戳\n"
"# float32[]  startpoint   #起点位置，先经后纬\n"
"# float32[]   endpoint    #终点位置，先经后纬\n"
"# float32[]   longitude        # 途径点经度\n"
"# float32[]   latitude         # 途径点纬度\n"
"# float32[]   speed         # 途径点速度\n"
"# float32[]   angle         # 途径点速度角度（航向角角度）\n"
"# float32[]   kapa         # 途径点曲率\n"
"# float32  process_time    # 进程处理时间\n"
"\n"
"\n"
"\n"
"float64  timestamp  #时间戳\n"
"\n"
"float32[]  startpoint   #局部路径起点位置\n"
"float32[]   endpoint    #局部路径终点位置\n"
"string[]   routedata   # 局部路径集合（没有修正路径）\n"
"string[]   routedata_fix   # 修正后的局部路径集合（没有修正路径）\n"
"\n"
"float32  process_time    # 进程处理时间\n"
"int32 len_path # 全局路径的长度\n"
"#int8 Global_Path_End_Flag #终点置1，其他0\n"
"int8 plan_over #0-等待规划完成 1-本次规划结束\n"
;
  }

  static const char* value(const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.startpoint);
      stream.next(m.endpoint);
      stream.next(m.routedata);
      stream.next(m.routedata_fix);
      stream.next(m.process_time);
      stream.next(m.len_path);
      stream.next(m.plan_over);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalPathPlanningInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::LocalPathPlanningInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "startpoint[]" << std::endl;
    for (size_t i = 0; i < v.startpoint.size(); ++i)
    {
      s << indent << "  startpoint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.startpoint[i]);
    }
    s << indent << "endpoint[]" << std::endl;
    for (size_t i = 0; i < v.endpoint.size(); ++i)
    {
      s << indent << "  endpoint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.endpoint[i]);
    }
    s << indent << "routedata[]" << std::endl;
    for (size_t i = 0; i < v.routedata.size(); ++i)
    {
      s << indent << "  routedata[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.routedata[i]);
    }
    s << indent << "routedata_fix[]" << std::endl;
    for (size_t i = 0; i < v.routedata_fix.size(); ++i)
    {
      s << indent << "  routedata_fix[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.routedata_fix[i]);
    }
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
    s << indent << "len_path: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len_path);
    s << indent << "plan_over: ";
    Printer<int8_t>::stream(s, indent + "  ", v.plan_over);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_LOCALPATHPLANNINGINTERFACE_H

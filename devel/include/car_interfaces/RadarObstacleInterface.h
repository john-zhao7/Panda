// Generated by gencpp from file car_interfaces/RadarObstacleInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_RADAROBSTACLEINTERFACE_H
#define CAR_INTERFACES_MESSAGE_RADAROBSTACLEINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct RadarObstacleInterface_
{
  typedef RadarObstacleInterface_<ContainerAllocator> Type;

  RadarObstacleInterface_()
    : timestamp(0.0)
    , id(0)
    , number(0)
    , obstacledata()
    , process_time(0.0)  {
    }
  RadarObstacleInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , number(0)
    , obstacledata(_alloc)
    , process_time(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint16_t _number_type;
  _number_type number;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obstacledata_type;
  _obstacledata_type obstacledata;

   typedef float _process_time_type;
  _process_time_type process_time;





  typedef boost::shared_ptr< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> const> ConstPtr;

}; // struct RadarObstacleInterface_

typedef ::car_interfaces::RadarObstacleInterface_<std::allocator<void> > RadarObstacleInterface;

typedef boost::shared_ptr< ::car_interfaces::RadarObstacleInterface > RadarObstacleInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::RadarObstacleInterface const> RadarObstacleInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.number == rhs.number &&
    lhs.obstacledata == rhs.obstacledata &&
    lhs.process_time == rhs.process_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d72c4e0d3fc62d79de85a43eb6d4cf59";
  }

  static const char* value(const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd72c4e0d3fc62d79ULL;
  static const uint64_t static_value2 = 0xde85a43eb6d4cf59ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/RadarObstacleInterface";
  }

  static const char* value(const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  timestamp  #时间戳\n"
"uint8  id  # 毫米波雷达ID\n"
"uint16  number  #障碍物数量\n"
"float32[]  obstacledata  #障碍物数据\n"
"float32  process_time    # 进程处理时间\n"
"#其中obstacledata格式float32[]为一维数组，储存按照[x  ,y  ,z  ,v  , x ,y ,z ,v ,latv ,……]存储49个长度数据为一组\n"
"# float  length       # 障碍物长度m，精度为0.01\n"
"# float  width       # 障碍物宽度m，精度为0.01\n"
"# float  height       # 障碍物高度m，精度为0.01\n"
"# float  x     # 障碍物的x坐标[米]，精度为0.01\n"
"# float  y   # 障碍物的y坐标[米]，精度为0.01\n"
"# float  z    # 障碍物的z坐标[米]，精度为0.01\n"
"# float  v=0    # 障碍物径向速度m/s，精度为0.01\n"
"# float  latv=0  # 障碍物的横向速度m/s，精度为0.01\n"
;
  }

  static const char* value(const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.number);
      stream.next(m.obstacledata);
      stream.next(m.process_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarObstacleInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::RadarObstacleInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::RadarObstacleInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.number);
    s << indent << "obstacledata[]" << std::endl;
    for (size_t i = 0; i < v.obstacledata.size(); ++i)
    {
      s << indent << "  obstacledata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obstacledata[i]);
    }
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_RADAROBSTACLEINTERFACE_H

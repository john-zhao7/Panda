// Generated by gencpp from file car_interfaces/SlamInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_SLAMINTERFACE_H
#define CAR_INTERFACES_MESSAGE_SLAMINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct SlamInterface_
{
  typedef SlamInterface_<ContainerAllocator> Type;

  SlamInterface_()
    : data(0.0)
    , state(0)  {
    }
  SlamInterface_(const ContainerAllocator& _alloc)
    : data(0.0)
    , state(0)  {
  (void)_alloc;
    }



   typedef float _data_type;
  _data_type data;

   typedef int64_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::car_interfaces::SlamInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::SlamInterface_<ContainerAllocator> const> ConstPtr;

}; // struct SlamInterface_

typedef ::car_interfaces::SlamInterface_<std::allocator<void> > SlamInterface;

typedef boost::shared_ptr< ::car_interfaces::SlamInterface > SlamInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::SlamInterface const> SlamInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::SlamInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::SlamInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::SlamInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::SlamInterface_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::SlamInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::SlamInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::SlamInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::SlamInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::SlamInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::SlamInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::SlamInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::SlamInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::SlamInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7aa5f5b73ac197e5dd5cd573af2d428";
  }

  static const char* value(const ::car_interfaces::SlamInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7aa5f5b73ac197eULL;
  static const uint64_t static_value2 = 0x5dd5cd573af2d428ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::SlamInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/SlamInterface";
  }

  static const char* value(const ::car_interfaces::SlamInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::SlamInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 data\n"
"int64 state\n"
;
  }

  static const char* value(const ::car_interfaces::SlamInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::SlamInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SlamInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::SlamInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::SlamInterface_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<float>::stream(s, indent + "  ", v.data);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_SLAMINTERFACE_H

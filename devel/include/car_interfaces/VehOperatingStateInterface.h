// Generated by gencpp from file car_interfaces/VehOperatingStateInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_VEHOPERATINGSTATEINTERFACE_H
#define CAR_INTERFACES_MESSAGE_VEHOPERATINGSTATEINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct VehOperatingStateInterface_
{
  typedef VehOperatingStateInterface_<ContainerAllocator> Type;

  VehOperatingStateInterface_()
    : timestamp(0.0)
    , VehOperat_Status(0)
    , process_time(0.0)  {
    }
  VehOperatingStateInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , VehOperat_Status(0)
    , process_time(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int8_t _VehOperat_Status_type;
  _VehOperat_Status_type VehOperat_Status;

   typedef float _process_time_type;
  _process_time_type process_time;





  typedef boost::shared_ptr< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> const> ConstPtr;

}; // struct VehOperatingStateInterface_

typedef ::car_interfaces::VehOperatingStateInterface_<std::allocator<void> > VehOperatingStateInterface;

typedef boost::shared_ptr< ::car_interfaces::VehOperatingStateInterface > VehOperatingStateInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::VehOperatingStateInterface const> VehOperatingStateInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.VehOperat_Status == rhs.VehOperat_Status &&
    lhs.process_time == rhs.process_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04f41a0b98d40a7eebbc487cf38ee657";
  }

  static const char* value(const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04f41a0b98d40a7eULL;
  static const uint64_t static_value2 = 0xebbc487cf38ee657ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/VehOperatingStateInterface";
  }

  static const char* value(const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  timestamp  # 数据帧时间戳\n"
"int8 VehOperat_Status #  1 - 人工驾驶;2 - 上电自检; 3 - 车辆起步; 4 - 进入棉田; 5 - 开始采棉; 6-暂停工作; 7- 卸载棉花;8-完工收车\n"
"float32  process_time    # 进程处理时间\n"
;
  }

  static const char* value(const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.VehOperat_Status);
      stream.next(m.process_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehOperatingStateInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::VehOperatingStateInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "VehOperat_Status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.VehOperat_Status);
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_VEHOPERATINGSTATEINTERFACE_H

// Generated by gencpp from file car_interfaces/LaneRecognitionInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_LANERECOGNITIONINTERFACE_H
#define CAR_INTERFACES_MESSAGE_LANERECOGNITIONINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct LaneRecognitionInterface_
{
  typedef LaneRecognitionInterface_<ContainerAllocator> Type;

  LaneRecognitionInterface_()
    : timestamp(0.0)
    , id(0)
    , centeroffset(0.0)
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , process_time(0.0)  {
    }
  LaneRecognitionInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , centeroffset(0.0)
    , a0(0.0)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , process_time(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _centeroffset_type;
  _centeroffset_type centeroffset;

   typedef float _a0_type;
  _a0_type a0;

   typedef float _a1_type;
  _a1_type a1;

   typedef float _a2_type;
  _a2_type a2;

   typedef float _a3_type;
  _a3_type a3;

   typedef float _process_time_type;
  _process_time_type process_time;





  typedef boost::shared_ptr< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> const> ConstPtr;

}; // struct LaneRecognitionInterface_

typedef ::car_interfaces::LaneRecognitionInterface_<std::allocator<void> > LaneRecognitionInterface;

typedef boost::shared_ptr< ::car_interfaces::LaneRecognitionInterface > LaneRecognitionInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::LaneRecognitionInterface const> LaneRecognitionInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.centeroffset == rhs.centeroffset &&
    lhs.a0 == rhs.a0 &&
    lhs.a1 == rhs.a1 &&
    lhs.a2 == rhs.a2 &&
    lhs.a3 == rhs.a3 &&
    lhs.process_time == rhs.process_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "591a0ed90f206f06a64e5af5b01b3f9e";
  }

  static const char* value(const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x591a0ed90f206f06ULL;
  static const uint64_t static_value2 = 0xa64e5af5b01b3f9eULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/LaneRecognitionInterface";
  }

  static const char* value(const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  timestamp  #时间戳\n"
"uint8  id  # 摄像头ID\n"
"float32  centeroffset     # 车辆相对于车道中心线偏移的距离，默认0\n"
"float32  a0     # 左侧车道中心线的表达式：y = a0+a1*x+ a2*x^2+a3*x^3；\n"
"float32  a1     # 左侧车道中心线的表达式：y = a0+a1*x+ a2*x^2+a3*x^3；\n"
"float32  a2     # 左侧车道中心线的表达式：y = a0+a1*x+ a2*x^2+a3*x^3；\n"
"float32  a3     # 左侧车道中心线的表达式：y = a0+a1*x+ a2*x^2+a3*x^3；sensor_msgs/Image  resultimage     # 融合后的车道线识别图像\n"
"float32  process_time    # 进程处理时间\n"
"\n"
"\n"
;
  }

  static const char* value(const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.centeroffset);
      stream.next(m.a0);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.process_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneRecognitionInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::LaneRecognitionInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "centeroffset: ";
    Printer<float>::stream(s, indent + "  ", v.centeroffset);
    s << indent << "a0: ";
    Printer<float>::stream(s, indent + "  ", v.a0);
    s << indent << "a1: ";
    Printer<float>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<float>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<float>::stream(s, indent + "  ", v.a3);
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_LANERECOGNITIONINTERFACE_H

// Generated by gencpp from file car_interfaces/NetStartEndPointInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_NETSTARTENDPOINTINTERFACE_H
#define CAR_INTERFACES_MESSAGE_NETSTARTENDPOINTINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct NetStartEndPointInterface_
{
  typedef NetStartEndPointInterface_<ContainerAllocator> Type;

  NetStartEndPointInterface_()
    : timestamp(0.0)
    , pointA_SN()
    , pointB_EN()
    , pointC_SE()
    , pointD_SW()
    , process_time(0.0)  {
    }
  NetStartEndPointInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , pointA_SN(_alloc)
    , pointB_EN(_alloc)
    , pointC_SE(_alloc)
    , pointD_SW(_alloc)
    , process_time(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pointA_SN_type;
  _pointA_SN_type pointA_SN;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pointB_EN_type;
  _pointB_EN_type pointB_EN;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pointC_SE_type;
  _pointC_SE_type pointC_SE;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pointD_SW_type;
  _pointD_SW_type pointD_SW;

   typedef float _process_time_type;
  _process_time_type process_time;





  typedef boost::shared_ptr< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> const> ConstPtr;

}; // struct NetStartEndPointInterface_

typedef ::car_interfaces::NetStartEndPointInterface_<std::allocator<void> > NetStartEndPointInterface;

typedef boost::shared_ptr< ::car_interfaces::NetStartEndPointInterface > NetStartEndPointInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::NetStartEndPointInterface const> NetStartEndPointInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.pointA_SN == rhs.pointA_SN &&
    lhs.pointB_EN == rhs.pointB_EN &&
    lhs.pointC_SE == rhs.pointC_SE &&
    lhs.pointD_SW == rhs.pointD_SW &&
    lhs.process_time == rhs.process_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61c44c5d3d9ddb9029d88dfec0d60221";
  }

  static const char* value(const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61c44c5d3d9ddb90ULL;
  static const uint64_t static_value2 = 0x29d88dfec0d60221ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/NetStartEndPointInterface";
  }

  static const char* value(const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 路径规划两点网络输入模块\n"
"# float64  timestamp  #时间戳\n"
"# float32[]  startpoint   #起点位置，先经后纬\n"
"# float32[]   endpoint    #终点位置，先经后纬\n"
"# float32  process_time    # 进程处理时间\n"
"# 路径规划起四点网络输入模块\n"
"float64  timestamp  #时间戳\n"
"float32[]  pointA_SN   #西北角位置，先经后纬\n"
"float32[]  pointB_EN   #东北角位置，先经后纬\n"
"float32[]  pointC_SE   #东南角位置，先经后纬\n"
"float32[]  pointD_SW   #西南角位置，先经后纬\n"
"float32  process_time    # 进程处理时间\n"
;
  }

  static const char* value(const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.pointA_SN);
      stream.next(m.pointB_EN);
      stream.next(m.pointC_SE);
      stream.next(m.pointD_SW);
      stream.next(m.process_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NetStartEndPointInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::NetStartEndPointInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "pointA_SN[]" << std::endl;
    for (size_t i = 0; i < v.pointA_SN.size(); ++i)
    {
      s << indent << "  pointA_SN[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointA_SN[i]);
    }
    s << indent << "pointB_EN[]" << std::endl;
    for (size_t i = 0; i < v.pointB_EN.size(); ++i)
    {
      s << indent << "  pointB_EN[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointB_EN[i]);
    }
    s << indent << "pointC_SE[]" << std::endl;
    for (size_t i = 0; i < v.pointC_SE.size(); ++i)
    {
      s << indent << "  pointC_SE[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointC_SE[i]);
    }
    s << indent << "pointD_SW[]" << std::endl;
    for (size_t i = 0; i < v.pointD_SW.size(); ++i)
    {
      s << indent << "  pointD_SW[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointD_SW[i]);
    }
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_NETSTARTENDPOINTINTERFACE_H

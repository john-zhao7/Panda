// Generated by gencpp from file car_interfaces/FusionRequisiteInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_FUSIONREQUISITEINTERFACE_H
#define CAR_INTERFACES_MESSAGE_FUSIONREQUISITEINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct FusionRequisiteInterface_
{
  typedef FusionRequisiteInterface_<ContainerAllocator> Type;

  FusionRequisiteInterface_()
    : timestamp(0.0)
    , id(0)
    , centeroffset(0.0)
    , signnumber(0)
    , signdata()
    , lightdata()
    , obstacledata()
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , eastvelocity(0.0)
    , northvelocity(0.0)
    , skyvelocity(0.0)
    , carspeed(0.0)  {
    }
  FusionRequisiteInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , centeroffset(0.0)
    , signnumber(0)
    , signdata(_alloc)
    , lightdata(_alloc)
    , obstacledata(_alloc)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , eastvelocity(0.0)
    , northvelocity(0.0)
    , skyvelocity(0.0)
    , carspeed(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _centeroffset_type;
  _centeroffset_type centeroffset;

   typedef uint8_t _signnumber_type;
  _signnumber_type signnumber;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _signdata_type;
  _signdata_type signdata;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _lightdata_type;
  _lightdata_type lightdata;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obstacledata_type;
  _obstacledata_type obstacledata;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _height_type;
  _height_type height;

   typedef double _posX_type;
  _posX_type posX;

   typedef double _posY_type;
  _posY_type posY;

   typedef double _posZ_type;
  _posZ_type posZ;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _eastvelocity_type;
  _eastvelocity_type eastvelocity;

   typedef float _northvelocity_type;
  _northvelocity_type northvelocity;

   typedef float _skyvelocity_type;
  _skyvelocity_type skyvelocity;

   typedef float _carspeed_type;
  _carspeed_type carspeed;





  typedef boost::shared_ptr< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> const> ConstPtr;

}; // struct FusionRequisiteInterface_

typedef ::car_interfaces::FusionRequisiteInterface_<std::allocator<void> > FusionRequisiteInterface;

typedef boost::shared_ptr< ::car_interfaces::FusionRequisiteInterface > FusionRequisiteInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::FusionRequisiteInterface const> FusionRequisiteInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.centeroffset == rhs.centeroffset &&
    lhs.signnumber == rhs.signnumber &&
    lhs.signdata == rhs.signdata &&
    lhs.lightdata == rhs.lightdata &&
    lhs.obstacledata == rhs.obstacledata &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.height == rhs.height &&
    lhs.posX == rhs.posX &&
    lhs.posY == rhs.posY &&
    lhs.posZ == rhs.posZ &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.eastvelocity == rhs.eastvelocity &&
    lhs.northvelocity == rhs.northvelocity &&
    lhs.skyvelocity == rhs.skyvelocity &&
    lhs.carspeed == rhs.carspeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "298ab3582625b62ae48e8a406af731df";
  }

  static const char* value(const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x298ab3582625b62aULL;
  static const uint64_t static_value2 = 0xe48e8a406af731dfULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/FusionRequisiteInterface";
  }

  static const char* value(const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  timestamp  #时间戳\n"
"uint8  id   # 车辆ID\n"
"float32  centeroffset     # 车道中心线偏移距离，默认0\n"
"uint8  signnumber  #交通标识数量\n"
"float32[]  signdata  #交通标志数据\n"
"float32[]  lightdata  # 红绿灯数据\n"
"float32[]  obstacledata  #障碍物数据\n"
"float64  longitude        # 经度\n"
"float64  latitude         # 纬度\n"
"float64  height         # 高度\n"
"float64 posX                           #定位点UTM坐标x\n"
"float64 posY                           #定位点UTM坐标y\n"
"float64 posZ                           #定位点UTM坐标z\n"
"float32  yaw         # 偏航角（-180,180）\n"
"float32  pitch        # 俯仰角（-90-90）\n"
"float32  roll         # 横滚角（-180-180）\n"
"float32  eastvelocity         # 东向速度\n"
"float32  northvelocity        # 北向速度\n"
"float32  skyvelocity         # 天向速度\n"
"float32  carspeed    # 车辆速度，单位为m/s\n"
"\n"
;
  }

  static const char* value(const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.centeroffset);
      stream.next(m.signnumber);
      stream.next(m.signdata);
      stream.next(m.lightdata);
      stream.next(m.obstacledata);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.height);
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.posZ);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.eastvelocity);
      stream.next(m.northvelocity);
      stream.next(m.skyvelocity);
      stream.next(m.carspeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusionRequisiteInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::FusionRequisiteInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "centeroffset: ";
    Printer<float>::stream(s, indent + "  ", v.centeroffset);
    s << indent << "signnumber: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signnumber);
    s << indent << "signdata[]" << std::endl;
    for (size_t i = 0; i < v.signdata.size(); ++i)
    {
      s << indent << "  signdata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.signdata[i]);
    }
    s << indent << "lightdata[]" << std::endl;
    for (size_t i = 0; i < v.lightdata.size(); ++i)
    {
      s << indent << "  lightdata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lightdata[i]);
    }
    s << indent << "obstacledata[]" << std::endl;
    for (size_t i = 0; i < v.obstacledata.size(); ++i)
    {
      s << indent << "  obstacledata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obstacledata[i]);
    }
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "posX: ";
    Printer<double>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<double>::stream(s, indent + "  ", v.posY);
    s << indent << "posZ: ";
    Printer<double>::stream(s, indent + "  ", v.posZ);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "eastvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.eastvelocity);
    s << indent << "northvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.northvelocity);
    s << indent << "skyvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.skyvelocity);
    s << indent << "carspeed: ";
    Printer<float>::stream(s, indent + "  ", v.carspeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_FUSIONREQUISITEINTERFACE_H

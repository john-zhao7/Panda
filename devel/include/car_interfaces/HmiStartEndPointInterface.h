// Generated by gencpp from file car_interfaces/HmiStartEndPointInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_HMISTARTENDPOINTINTERFACE_H
#define CAR_INTERFACES_MESSAGE_HMISTARTENDPOINTINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct HmiStartEndPointInterface_
{
  typedef HmiStartEndPointInterface_<ContainerAllocator> Type;

  HmiStartEndPointInterface_()
    : flag(0)
    , roadid(0)
    , stationid(0)  {
    }
  HmiStartEndPointInterface_(const ContainerAllocator& _alloc)
    : flag(0)
    , roadid(0)
    , stationid(0)  {
  (void)_alloc;
    }



   typedef int8_t _flag_type;
  _flag_type flag;

   typedef int32_t _roadid_type;
  _roadid_type roadid;

   typedef int32_t _stationid_type;
  _stationid_type stationid;





  typedef boost::shared_ptr< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> const> ConstPtr;

}; // struct HmiStartEndPointInterface_

typedef ::car_interfaces::HmiStartEndPointInterface_<std::allocator<void> > HmiStartEndPointInterface;

typedef boost::shared_ptr< ::car_interfaces::HmiStartEndPointInterface > HmiStartEndPointInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::HmiStartEndPointInterface const> HmiStartEndPointInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag &&
    lhs.roadid == rhs.roadid &&
    lhs.stationid == rhs.stationid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "764c8e13d4a4b0d9d9bdd7520da5ffd7";
  }

  static const char* value(const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x764c8e13d4a4b0d9ULL;
  static const uint64_t static_value2 = 0xd9bdd7520da5ffd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/HmiStartEndPointInterface";
  }

  static const char* value(const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 flag                       #标志位\n"
"int32 roadid                     #界面重启\n"
"int32 stationid 		 #紧急停车按钮\n"
;
  }

  static const char* value(const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.roadid);
      stream.next(m.stationid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HmiStartEndPointInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::HmiStartEndPointInterface_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "roadid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roadid);
    s << indent << "stationid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stationid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_HMISTARTENDPOINTINTERFACE_H

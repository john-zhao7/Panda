// Generated by gencpp from file car_interfaces/FusionInterface.msg
// DO NOT EDIT!


#ifndef CAR_INTERFACES_MESSAGE_FUSIONINTERFACE_H
#define CAR_INTERFACES_MESSAGE_FUSIONINTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_interfaces
{
template <class ContainerAllocator>
struct FusionInterface_
{
  typedef FusionInterface_<ContainerAllocator> Type;

  FusionInterface_()
    : timestamp(0.0)
    , id(0)
    , carlength(0.0)
    , carwidth(0.0)
    , carheight(0.0)
    , centeroffset(0.0)
    , signnumber(0)
    , signdata()
    , lightdata()
    , obstacledata()
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , eastvelocity(0.0)
    , northvelocity(0.0)
    , skyvelocity(0.0)
    , carspeed(0.0)
    , steerangle(0.0)
    , gearpos(0)
    , braketq(0.0)
    , parkingstate(0)
    , soc(0)
    , batteryvol(0)
    , batterydischargecur(0)
    , car_run_mode(0)
    , throttle_percentage(0)
    , braking_percentage(0)
    , left_light(false)
    , right_light(false)
    , reversing_light(false)
    , speaker(false)
    , start_button(false)
    , stop_button(false)
    , state(0)
    , error(0)
    , cotton_picker_fan_Enabler_act(0.0)
    , cotton_bin_upper_act(0.0)
    , cotton_bin_lower_act(0)
    , cotton_bin_tilting_act(0)
    , cotton_bin_restore_act(0)
    , cotton_unload_act(0)
    , cotton_picker_head_height(0.0)
    , Target_primary_gear_act(0)
    , Target_EngineSpeedLevel_act(0)
    , Target_speedlever_percentage_act(0)
    , process_time(0.0)  {
    }
  FusionInterface_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , carlength(0.0)
    , carwidth(0.0)
    , carheight(0.0)
    , centeroffset(0.0)
    , signnumber(0)
    , signdata(_alloc)
    , lightdata(_alloc)
    , obstacledata(_alloc)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , eastvelocity(0.0)
    , northvelocity(0.0)
    , skyvelocity(0.0)
    , carspeed(0.0)
    , steerangle(0.0)
    , gearpos(0)
    , braketq(0.0)
    , parkingstate(0)
    , soc(0)
    , batteryvol(0)
    , batterydischargecur(0)
    , car_run_mode(0)
    , throttle_percentage(0)
    , braking_percentage(0)
    , left_light(false)
    , right_light(false)
    , reversing_light(false)
    , speaker(false)
    , start_button(false)
    , stop_button(false)
    , state(0)
    , error(0)
    , cotton_picker_fan_Enabler_act(0.0)
    , cotton_bin_upper_act(0.0)
    , cotton_bin_lower_act(0)
    , cotton_bin_tilting_act(0)
    , cotton_bin_restore_act(0)
    , cotton_unload_act(0)
    , cotton_picker_head_height(0.0)
    , Target_primary_gear_act(0)
    , Target_EngineSpeedLevel_act(0)
    , Target_speedlever_percentage_act(0)
    , process_time(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _carlength_type;
  _carlength_type carlength;

   typedef float _carwidth_type;
  _carwidth_type carwidth;

   typedef float _carheight_type;
  _carheight_type carheight;

   typedef float _centeroffset_type;
  _centeroffset_type centeroffset;

   typedef uint8_t _signnumber_type;
  _signnumber_type signnumber;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _signdata_type;
  _signdata_type signdata;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _lightdata_type;
  _lightdata_type lightdata;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _obstacledata_type;
  _obstacledata_type obstacledata;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _wx_type;
  _wx_type wx;

   typedef float _wy_type;
  _wy_type wy;

   typedef float _wz_type;
  _wz_type wz;

   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _height_type;
  _height_type height;

   typedef float _eastvelocity_type;
  _eastvelocity_type eastvelocity;

   typedef float _northvelocity_type;
  _northvelocity_type northvelocity;

   typedef float _skyvelocity_type;
  _skyvelocity_type skyvelocity;

   typedef float _carspeed_type;
  _carspeed_type carspeed;

   typedef float _steerangle_type;
  _steerangle_type steerangle;

   typedef int8_t _gearpos_type;
  _gearpos_type gearpos;

   typedef float _braketq_type;
  _braketq_type braketq;

   typedef uint8_t _parkingstate_type;
  _parkingstate_type parkingstate;

   typedef uint8_t _soc_type;
  _soc_type soc;

   typedef uint8_t _batteryvol_type;
  _batteryvol_type batteryvol;

   typedef uint16_t _batterydischargecur_type;
  _batterydischargecur_type batterydischargecur;

   typedef uint8_t _car_run_mode_type;
  _car_run_mode_type car_run_mode;

   typedef uint8_t _throttle_percentage_type;
  _throttle_percentage_type throttle_percentage;

   typedef uint8_t _braking_percentage_type;
  _braking_percentage_type braking_percentage;

   typedef uint8_t _left_light_type;
  _left_light_type left_light;

   typedef uint8_t _right_light_type;
  _right_light_type right_light;

   typedef uint8_t _reversing_light_type;
  _reversing_light_type reversing_light;

   typedef uint8_t _speaker_type;
  _speaker_type speaker;

   typedef uint8_t _start_button_type;
  _start_button_type start_button;

   typedef uint8_t _stop_button_type;
  _stop_button_type stop_button;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint8_t _error_type;
  _error_type error;

   typedef float _cotton_picker_fan_Enabler_act_type;
  _cotton_picker_fan_Enabler_act_type cotton_picker_fan_Enabler_act;

   typedef float _cotton_bin_upper_act_type;
  _cotton_bin_upper_act_type cotton_bin_upper_act;

   typedef uint8_t _cotton_bin_lower_act_type;
  _cotton_bin_lower_act_type cotton_bin_lower_act;

   typedef uint8_t _cotton_bin_tilting_act_type;
  _cotton_bin_tilting_act_type cotton_bin_tilting_act;

   typedef uint8_t _cotton_bin_restore_act_type;
  _cotton_bin_restore_act_type cotton_bin_restore_act;

   typedef uint8_t _cotton_unload_act_type;
  _cotton_unload_act_type cotton_unload_act;

   typedef float _cotton_picker_head_height_type;
  _cotton_picker_head_height_type cotton_picker_head_height;

   typedef uint8_t _Target_primary_gear_act_type;
  _Target_primary_gear_act_type Target_primary_gear_act;

   typedef uint8_t _Target_EngineSpeedLevel_act_type;
  _Target_EngineSpeedLevel_act_type Target_EngineSpeedLevel_act;

   typedef uint8_t _Target_speedlever_percentage_act_type;
  _Target_speedlever_percentage_act_type Target_speedlever_percentage_act;

   typedef float _process_time_type;
  _process_time_type process_time;





  typedef boost::shared_ptr< ::car_interfaces::FusionInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_interfaces::FusionInterface_<ContainerAllocator> const> ConstPtr;

}; // struct FusionInterface_

typedef ::car_interfaces::FusionInterface_<std::allocator<void> > FusionInterface;

typedef boost::shared_ptr< ::car_interfaces::FusionInterface > FusionInterfacePtr;
typedef boost::shared_ptr< ::car_interfaces::FusionInterface const> FusionInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_interfaces::FusionInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_interfaces::FusionInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_interfaces::FusionInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::FusionInterface_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.carlength == rhs.carlength &&
    lhs.carwidth == rhs.carwidth &&
    lhs.carheight == rhs.carheight &&
    lhs.centeroffset == rhs.centeroffset &&
    lhs.signnumber == rhs.signnumber &&
    lhs.signdata == rhs.signdata &&
    lhs.lightdata == rhs.lightdata &&
    lhs.obstacledata == rhs.obstacledata &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.wx == rhs.wx &&
    lhs.wy == rhs.wy &&
    lhs.wz == rhs.wz &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.height == rhs.height &&
    lhs.eastvelocity == rhs.eastvelocity &&
    lhs.northvelocity == rhs.northvelocity &&
    lhs.skyvelocity == rhs.skyvelocity &&
    lhs.carspeed == rhs.carspeed &&
    lhs.steerangle == rhs.steerangle &&
    lhs.gearpos == rhs.gearpos &&
    lhs.braketq == rhs.braketq &&
    lhs.parkingstate == rhs.parkingstate &&
    lhs.soc == rhs.soc &&
    lhs.batteryvol == rhs.batteryvol &&
    lhs.batterydischargecur == rhs.batterydischargecur &&
    lhs.car_run_mode == rhs.car_run_mode &&
    lhs.throttle_percentage == rhs.throttle_percentage &&
    lhs.braking_percentage == rhs.braking_percentage &&
    lhs.left_light == rhs.left_light &&
    lhs.right_light == rhs.right_light &&
    lhs.reversing_light == rhs.reversing_light &&
    lhs.speaker == rhs.speaker &&
    lhs.start_button == rhs.start_button &&
    lhs.stop_button == rhs.stop_button &&
    lhs.state == rhs.state &&
    lhs.error == rhs.error &&
    lhs.cotton_picker_fan_Enabler_act == rhs.cotton_picker_fan_Enabler_act &&
    lhs.cotton_bin_upper_act == rhs.cotton_bin_upper_act &&
    lhs.cotton_bin_lower_act == rhs.cotton_bin_lower_act &&
    lhs.cotton_bin_tilting_act == rhs.cotton_bin_tilting_act &&
    lhs.cotton_bin_restore_act == rhs.cotton_bin_restore_act &&
    lhs.cotton_unload_act == rhs.cotton_unload_act &&
    lhs.cotton_picker_head_height == rhs.cotton_picker_head_height &&
    lhs.Target_primary_gear_act == rhs.Target_primary_gear_act &&
    lhs.Target_EngineSpeedLevel_act == rhs.Target_EngineSpeedLevel_act &&
    lhs.Target_speedlever_percentage_act == rhs.Target_speedlever_percentage_act &&
    lhs.process_time == rhs.process_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_interfaces::FusionInterface_<ContainerAllocator1> & lhs, const ::car_interfaces::FusionInterface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::FusionInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_interfaces::FusionInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::FusionInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_interfaces::FusionInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::FusionInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_interfaces::FusionInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_interfaces::FusionInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bc3fce2c31a43ab376a08df38ba153b";
  }

  static const char* value(const ::car_interfaces::FusionInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bc3fce2c31a43abULL;
  static const uint64_t static_value2 = 0x376a08df38ba153bULL;
};

template<class ContainerAllocator>
struct DataType< ::car_interfaces::FusionInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_interfaces/FusionInterface";
  }

  static const char* value(const ::car_interfaces::FusionInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_interfaces::FusionInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  timestamp  #时间戳\n"
"uint8  id   # 车辆ID\n"
"float32  carlength         # 车长m\n"
"float32  carwidth         # 车宽m\n"
"float32  carheight         # 车高m\n"
"float32  centeroffset     # 车道中心线偏移距离，默认0\n"
"uint8  signnumber  #交通标识数量\n"
"float32[]  signdata  #交通标志数据\n"
"float32[]  lightdata  # 红绿灯数据\n"
"float32[]  obstacledata  #障碍物数据\n"
"float32  yaw         # 偏航角（0-359.99）\n"
"float32  pitch        # 俯仰角（-90-90）\n"
"float32  roll         # 横滚角（-180-180）\n"
"float32  wx         # 角速度x\n"
"float32  wy         # 角速度y\n"
"float32  wz         # 角速度z\n"
"float32  ax         # 加速度x\n"
"float32  ay         # 加速度y\n"
"float32  az         # 加速度z\n"
"float64  longitude        # 经度\n"
"float64  latitude         # 纬度\n"
"float64  height         # 高度\n"
"float32  eastvelocity         # 东向速度\n"
"float32  northvelocity        # 北向速度\n"
"float32  skyvelocity         # 天向速度\n"
"float32  carspeed    # 车辆速度，单位为m/s\n"
"float32  steerangle    # 车辆转角，左转为正，右转为负\n"
"int8  gearpos    # 车辆档位信号（01：驻车，02：空挡（N），03：前进（D），04：后退（R），05：无效）\n"
"float32  braketq    # 制动量（-50-50nm）\n"
"uint8  parkingstate    # 制动状态（00：驻车状态，01：驻车释放状态）\n"
"uint8  soc    # 电池当前SOC（0-100）\n"
"uint8  batteryvol    # 电池电压（0-55V）\n"
"uint16  batterydischargecur    # 电池放电电流（0-100A）\n"
"uint8  car_run_mode   #车辆运行模式： 0： ACU控制  1：自动驾驶  2： 急停模式\n"
"uint8  throttle_percentage  #油门踏板开度： 取值0～100\n"
"uint8  braking_percentage  #制动踏板开度： 取值0～100\n"
"bool  left_light    #左转向灯状态：0：关闭，1：打开\n"
"bool  right_light    #右转向灯状态：0：关闭，1：打开\n"
"bool  reversing_light   #倒车灯状态：0：关闭，1：打开\n"
"bool  speaker     #喇叭状态：0：关闭，1：打开\n"
"bool  start_button     #启动按钮状态：0：按键无效，1：按键有效\n"
"bool  stop_button     #急停按钮状态：0：按键无效，1：按键有效\n"
"uint8  state          # 设备状态，0：状态正常，1：电池箱报警；2：电机控制器报警\n"
"uint8  error          # 错误码；电池箱报警：1：单体过压或欠压，2：放电电流异常，3：电压报警，4：电池温度报警，5：电池SOC过低。电机控制器报警：1：转向电机控制器故障，2：驱动电机控制器故障\n"
"float32  cotton_picker_fan_Enabler_act    #  使能采头与风机，1-使能；0-保持不变；\n"
"float32  cotton_bin_upper_act    # 升棉箱实际状态，1-提升；0-保持不变；\n"
"uint8  cotton_bin_lower_act   # 降棉箱实际状态，1-降低；0-保持不变；\n"
"uint8  cotton_bin_tilting_act   #  棉箱倾斜实际状态，1-倾斜；0-保持不变；\n"
"uint8  cotton_bin_restore_act # 棉箱回正实际状态，1-回正；0-保持不变；\n"
"uint8  cotton_unload_act  # 卸棉花实际状态（传送带），1-卸载；0-保持不变；\n"
"float32  cotton_picker_head_height  # 棉花采头高度，单位：m；\n"
"uint8  Target_primary_gear_act   # 01：低速，02：中速；03：高速；\n"
"uint8  Target_EngineSpeedLevel_act   # 01：低速；02：中速；03：高速；\n"
"uint8  Target_speedlever_percentage_act   #车速手柄开度（-100%-100%）   取值【-100, 100】，负数为后退，正数为前进。\n"
"float32  process_time     # 进程处理时间\n"
"\n"
"\n"
"#其中signdata格式float32[]为一维数组，储存按照[category ,length ,width ,height , x  ,y  ,z  ,v  ,latv ,category  ,length ,width ,height , x ,y ,z ,v ,latv ,……]存储，9个长度数据为一组\n"
"# int  category     # 交通标志类别，需自行定义类别，务必做好记录\n"
"# float  length       # 交通标志长度m，精度为0.01\n"
"# float  width       # 交通标志宽度m，精度为0.01\n"
"# float  height       # 交通标志高度m，精度为0.01\n"
"# float  x     # 交通标志的x坐标[米]，精度为0.01\n"
"# float  y   # 交通标志的y坐标[米]，精度为0.01\n"
"# float  z    # 交通标志的z坐标[米]，精度为0.01\n"
"# float  v=0    # 交通标志径向速度m/s，默认为0，精度为0.01\n"
"# float  latv=0  # 交通标志的横向速度m/s，默认为0，精度为0.01\n"
"\n"
"# 其中lightdata格式float32[]为一维数组，储存按照[x,y,z,leftcolor,straightcolor,rightcolor,……]存储，6个长度数据为一组\n"
"# float  x     # 红绿灯x坐标[米]，精度为0.01\n"
"# float  y     # 红绿灯y坐标[米]，精度为0.01\n"
"# float  z     # 红绿灯z坐标[米]，精度为0.01\n"
"# int   leftcolor   #左转灯状态，01：红，02：黄，03：绿，04：关闭，关闭时代表没有左转灯\n"
"# int   straightcolor   #直行灯状态，01：红，02：黄，03：绿，04：关闭，\n"
"# int   rightcolor   #右转灯状态，01：红，02：黄，03：绿，04：关闭，关闭时代表没有右转灯\n"
"# 一般情况下，如果左转/右转/左右转和直行灯同时存在，无论什么颜色状态，这两个灯都是常亮的。如果信号灯只有直行灯，那用左/右转灯关闭代表当前路口只有直行灯，直行灯绿色时既可以直行也可以左转。\n"
"\n"
"#其中obstacledata格式float32[]为一维数组，储存按照[category ,length ,width ,height , x  ,y  ,z  ,v  ,latv ,category  ,length ,width ,height , x ,y ,z ,v ,latv ,……]存储，9个长度数据为一组\n"
"# int  category     # 障碍物类别， 0点目标；1小汽车；2卡车/客车；3行人；4摩托车/电动车；5自行车；6宽大目标（如墙面）；7reserved保留； 8traffic light； 9stop sign\n"
"# float  length       # 障碍物长度m，精度为0.01\n"
"# float  width       # 障碍物宽度m，精度为0.01\n"
"# float  height       # 障碍物高度m，精度为0.01\n"
"# float  x     # 障碍物的x坐标[米]，精度为0.01\n"
"# float  y   # 障碍物的y坐标[米]，精度为0.01\n"
"# float  z    # 障碍物的z坐标[米]，精度为0.01\n"
"# float  v=0    # 障碍物径向速度m/s，精度为0.01\n"
"# float  latv=0  # 障碍物的横向速度m/s，精度为0.01\n"
;
  }

  static const char* value(const ::car_interfaces::FusionInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_interfaces::FusionInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.carlength);
      stream.next(m.carwidth);
      stream.next(m.carheight);
      stream.next(m.centeroffset);
      stream.next(m.signnumber);
      stream.next(m.signdata);
      stream.next(m.lightdata);
      stream.next(m.obstacledata);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.wx);
      stream.next(m.wy);
      stream.next(m.wz);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.height);
      stream.next(m.eastvelocity);
      stream.next(m.northvelocity);
      stream.next(m.skyvelocity);
      stream.next(m.carspeed);
      stream.next(m.steerangle);
      stream.next(m.gearpos);
      stream.next(m.braketq);
      stream.next(m.parkingstate);
      stream.next(m.soc);
      stream.next(m.batteryvol);
      stream.next(m.batterydischargecur);
      stream.next(m.car_run_mode);
      stream.next(m.throttle_percentage);
      stream.next(m.braking_percentage);
      stream.next(m.left_light);
      stream.next(m.right_light);
      stream.next(m.reversing_light);
      stream.next(m.speaker);
      stream.next(m.start_button);
      stream.next(m.stop_button);
      stream.next(m.state);
      stream.next(m.error);
      stream.next(m.cotton_picker_fan_Enabler_act);
      stream.next(m.cotton_bin_upper_act);
      stream.next(m.cotton_bin_lower_act);
      stream.next(m.cotton_bin_tilting_act);
      stream.next(m.cotton_bin_restore_act);
      stream.next(m.cotton_unload_act);
      stream.next(m.cotton_picker_head_height);
      stream.next(m.Target_primary_gear_act);
      stream.next(m.Target_EngineSpeedLevel_act);
      stream.next(m.Target_speedlever_percentage_act);
      stream.next(m.process_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusionInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_interfaces::FusionInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_interfaces::FusionInterface_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "carlength: ";
    Printer<float>::stream(s, indent + "  ", v.carlength);
    s << indent << "carwidth: ";
    Printer<float>::stream(s, indent + "  ", v.carwidth);
    s << indent << "carheight: ";
    Printer<float>::stream(s, indent + "  ", v.carheight);
    s << indent << "centeroffset: ";
    Printer<float>::stream(s, indent + "  ", v.centeroffset);
    s << indent << "signnumber: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signnumber);
    s << indent << "signdata[]" << std::endl;
    for (size_t i = 0; i < v.signdata.size(); ++i)
    {
      s << indent << "  signdata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.signdata[i]);
    }
    s << indent << "lightdata[]" << std::endl;
    for (size_t i = 0; i < v.lightdata.size(); ++i)
    {
      s << indent << "  lightdata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lightdata[i]);
    }
    s << indent << "obstacledata[]" << std::endl;
    for (size_t i = 0; i < v.obstacledata.size(); ++i)
    {
      s << indent << "  obstacledata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obstacledata[i]);
    }
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "wx: ";
    Printer<float>::stream(s, indent + "  ", v.wx);
    s << indent << "wy: ";
    Printer<float>::stream(s, indent + "  ", v.wy);
    s << indent << "wz: ";
    Printer<float>::stream(s, indent + "  ", v.wz);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "eastvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.eastvelocity);
    s << indent << "northvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.northvelocity);
    s << indent << "skyvelocity: ";
    Printer<float>::stream(s, indent + "  ", v.skyvelocity);
    s << indent << "carspeed: ";
    Printer<float>::stream(s, indent + "  ", v.carspeed);
    s << indent << "steerangle: ";
    Printer<float>::stream(s, indent + "  ", v.steerangle);
    s << indent << "gearpos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gearpos);
    s << indent << "braketq: ";
    Printer<float>::stream(s, indent + "  ", v.braketq);
    s << indent << "parkingstate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parkingstate);
    s << indent << "soc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.soc);
    s << indent << "batteryvol: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryvol);
    s << indent << "batterydischargecur: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.batterydischargecur);
    s << indent << "car_run_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.car_run_mode);
    s << indent << "throttle_percentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_percentage);
    s << indent << "braking_percentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.braking_percentage);
    s << indent << "left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_light);
    s << indent << "right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_light);
    s << indent << "reversing_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reversing_light);
    s << indent << "speaker: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speaker);
    s << indent << "start_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_button);
    s << indent << "stop_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_button);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "cotton_picker_fan_Enabler_act: ";
    Printer<float>::stream(s, indent + "  ", v.cotton_picker_fan_Enabler_act);
    s << indent << "cotton_bin_upper_act: ";
    Printer<float>::stream(s, indent + "  ", v.cotton_bin_upper_act);
    s << indent << "cotton_bin_lower_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cotton_bin_lower_act);
    s << indent << "cotton_bin_tilting_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cotton_bin_tilting_act);
    s << indent << "cotton_bin_restore_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cotton_bin_restore_act);
    s << indent << "cotton_unload_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cotton_unload_act);
    s << indent << "cotton_picker_head_height: ";
    Printer<float>::stream(s, indent + "  ", v.cotton_picker_head_height);
    s << indent << "Target_primary_gear_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Target_primary_gear_act);
    s << indent << "Target_EngineSpeedLevel_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Target_EngineSpeedLevel_act);
    s << indent << "Target_speedlever_percentage_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Target_speedlever_percentage_act);
    s << indent << "process_time: ";
    Printer<float>::stream(s, indent + "  ", v.process_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_INTERFACES_MESSAGE_FUSIONINTERFACE_H
